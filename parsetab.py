
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightLARROWrightNOTnonassocLELTEQUALSleftPLUSMINUSleftTIMESDIVIDErightISVOIDrightTILDErightATrightDOTAT CASE CLASS COLON COMMA DIVIDE DOT ELSE EQUALS ESAC FALSE FI IDENTIFIER IF IN INHERITS INTEGER ISVOID LARROW LBRACE LE LET LOOP LPAREN LT MINUS NEW NOT OF PLUS POOL RARROW RBRACE RPAREN SEMI STRING THEN TILDE TIMES TRUE TYPE WHILEprogram : class_listclass : CLASS TYPE LBRACE RBRACE\n            | CLASS TYPE INHERITS TYPE LBRACE RBRACE\n            | CLASS TYPE INHERITS TYPE LBRACE feature_list RBRACE\n            | CLASS TYPE LBRACE feature_list RBRACEclass_list : class SEMI class_list\n        | emptyfeature : IDENTIFIER COLON TYPE\n        | IDENTIFIER COLON TYPE LARROW expression\n        | IDENTIFIER LPAREN formal_list RPAREN COLON TYPE LBRACE expression RBRACE\n        | IDENTIFIER LPAREN RPAREN COLON TYPE LBRACE expression RBRACEfeature_list : feature SEMI feature_list\n        | emptyformal : IDENTIFIER COLON TYPEformal_list : formal COMMA formal_list\n        | formalexpression : expr_assign\n        | expr_let \n        | expr_dispatch\n        | expr_loop\n        | expr_block\n        | expr_newtype\n        | expr_mathcondition\n        | expr_ID\n        | expr_int\n        | expr_string\n        | expr_bool\n        | expr_case\n        | LPAREN expression RPAREN expression_list : expression SEMI expression_list\n        | emptyexpr_assign : IDENTIFIER LARROW expressionexpr_let : LET binding_list IN expression binding : IDENTIFIER COLON TYPE\n        |  IDENTIFIER COLON TYPE LARROW expression  binding_list : binding COMMA binding_list \n        | binding expr_dispatch : expression DOT IDENTIFIER LPAREN args_list RPAREN  \n        | expression DOT IDENTIFIER LPAREN RPAREN\n        | expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN\n        | expression AT TYPE DOT IDENTIFIER LPAREN RPAREN\n        | IDENTIFIER LPAREN args_list RPAREN \n        | IDENTIFIER LPAREN RPARENargs_list : expression COMMA args_list\n        | expression expr_loop : IF expression THEN expression ELSE expression FI\n        | WHILE expression LOOP expression POOL  expr_block : LBRACE expression_list RBRACEexpr_case : CASE expression OF element_list ESAC  expr_case_element : IDENTIFIER COLON TYPE RARROW expression SEMI element_list : expr_case_element element_list\n        | expr_case_element  expr_newtype : NEW TYPE expr_mathcondition : expression PLUS expression\n        | expression MINUS expression\n        | expression TIMES expression\n        | expression DIVIDE expression\n        | expression LT expression\n        | expression LE expression\n        | expression EQUALS expression\n        | TILDE expression\n        | NOT expression\n        | ISVOID expression  expr_ID : IDENTIFIER expr_int : INTEGER expr_string : STRINGexpr_bool : TRUE\n        | FALSEempty : '
    
_lr_action_items = {'CLASS':([0,6,],[5,5,]),'$end':([0,1,2,4,6,8,],[-69,0,-1,-7,-69,-6,]),'SEMI':([3,11,13,17,23,28,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,60,61,62,86,88,89,90,91,95,97,101,102,103,104,105,106,107,108,114,119,123,133,136,140,141,144,145,151,152,154,155,],[6,-2,18,-5,-8,-3,-4,-64,-9,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-65,-66,-67,-68,115,-53,-61,-62,-63,-32,-43,-54,-55,-56,-57,-58,-59,-60,-29,-48,-42,-33,-11,-39,-47,-49,-10,-38,-41,-46,-40,156,]),'TYPE':([5,10,19,31,33,55,65,71,111,143,],[7,16,23,64,66,88,93,100,125,149,]),'LBRACE':([7,16,30,50,52,53,54,56,57,58,63,66,68,69,72,73,74,75,76,77,78,93,94,109,112,113,115,117,120,121,138,139,146,153,],[9,21,54,54,54,54,54,54,54,54,54,94,54,54,54,54,54,54,54,54,54,117,54,54,54,54,54,54,54,54,54,54,54,54,]),'INHERITS':([7,],[10,]),'RBRACE':([9,12,14,18,21,22,29,36,38,39,40,41,42,43,44,45,46,47,48,49,54,59,60,61,62,85,87,88,89,90,91,95,97,101,102,103,104,105,106,107,108,114,115,118,119,123,128,132,136,140,141,145,151,152,154,],[11,17,-13,-69,28,-12,35,-64,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-69,-65,-66,-67,-68,114,-31,-53,-61,-62,-63,-32,-43,-54,-55,-56,-57,-58,-59,-60,-29,-48,-69,133,-42,-33,-30,144,-39,-47,-49,-38,-41,-46,-40,]),'IDENTIFIER':([9,18,20,21,30,34,50,51,52,53,54,56,57,58,63,68,69,70,72,73,74,75,76,77,78,94,109,110,112,113,115,116,117,120,121,122,130,138,139,146,153,156,],[15,15,24,15,36,24,36,82,36,36,36,36,36,36,36,36,36,99,36,36,36,36,36,36,36,36,36,82,36,36,36,131,36,36,36,137,131,36,36,36,36,-50,]),'COLON':([15,24,26,32,82,131,],[19,31,33,65,111,143,]),'LPAREN':([15,30,36,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,99,109,112,113,115,117,120,121,137,138,139,146,153,],[20,50,69,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,121,50,50,50,50,50,50,50,146,50,50,50,50,]),'RPAREN':([20,25,27,36,38,39,40,41,42,43,44,45,46,47,48,49,59,60,61,62,64,67,69,79,88,89,90,91,95,96,97,98,101,102,103,104,105,106,107,108,114,119,121,123,134,135,136,140,141,145,146,150,151,152,154,],[26,32,-16,-64,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-65,-66,-67,-68,-14,-15,97,108,-53,-61,-62,-63,-32,119,-43,-45,-54,-55,-56,-57,-58,-59,-60,-29,-48,-42,136,-33,-44,145,-39,-47,-49,-38,151,154,-41,-46,-40,]),'LARROW':([23,36,125,],[30,68,138,]),'COMMA':([27,36,38,39,40,41,42,43,44,45,46,47,48,49,59,60,61,62,64,81,88,89,90,91,95,97,98,101,102,103,104,105,106,107,108,114,119,123,125,136,140,141,145,147,151,152,154,],[34,-64,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-65,-66,-67,-68,-14,110,-53,-61,-62,-63,-32,-43,120,-54,-55,-56,-57,-58,-59,-60,-29,-48,-42,-33,-34,-39,-47,-49,-38,-35,-41,-46,-40,]),'LET':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'IF':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'WHILE':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'NEW':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'TILDE':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'NOT':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'ISVOID':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'INTEGER':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'STRING':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'TRUE':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'FALSE':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'CASE':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'DOT':([36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,60,61,62,79,83,84,86,88,89,90,91,92,95,97,98,100,101,102,103,104,105,106,107,108,114,118,119,123,126,127,132,136,140,141,145,147,148,151,152,154,155,],[-64,70,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-65,-66,-67,-68,70,70,70,70,-53,70,70,70,70,70,-43,70,122,70,70,70,70,70,70,70,-29,-48,70,-42,70,70,70,70,-39,-47,-49,-38,70,70,-41,-46,-40,70,]),'AT':([36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,60,61,62,79,83,84,86,88,89,90,91,92,95,97,98,101,102,103,104,105,106,107,108,114,118,119,123,126,127,132,136,140,141,145,147,148,151,152,154,155,],[-64,71,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-65,-66,-67,-68,71,71,71,71,-53,71,71,71,71,71,-43,71,71,71,71,71,71,71,71,-29,-48,71,-42,71,71,71,71,-39,-47,-49,-38,71,71,-41,-46,-40,71,]),'PLUS':([36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,60,61,62,79,83,84,86,88,89,90,91,92,95,97,98,101,102,103,104,105,106,107,108,114,118,119,123,126,127,132,136,140,141,145,147,148,151,152,154,155,],[-64,72,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-65,-66,-67,-68,72,72,72,72,-53,-61,72,-63,72,72,-43,72,-54,-55,-56,-57,72,72,72,-29,-48,72,-42,72,72,72,72,-39,-47,-49,-38,72,72,-41,-46,-40,72,]),'MINUS':([36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,60,61,62,79,83,84,86,88,89,90,91,92,95,97,98,101,102,103,104,105,106,107,108,114,118,119,123,126,127,132,136,140,141,145,147,148,151,152,154,155,],[-64,73,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-65,-66,-67,-68,73,73,73,73,-53,-61,73,-63,73,73,-43,73,-54,-55,-56,-57,73,73,73,-29,-48,73,-42,73,73,73,73,-39,-47,-49,-38,73,73,-41,-46,-40,73,]),'TIMES':([36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,60,61,62,79,83,84,86,88,89,90,91,92,95,97,98,101,102,103,104,105,106,107,108,114,118,119,123,126,127,132,136,140,141,145,147,148,151,152,154,155,],[-64,74,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-65,-66,-67,-68,74,74,74,74,-53,-61,74,-63,74,74,-43,74,74,74,-56,-57,74,74,74,-29,-48,74,-42,74,74,74,74,-39,-47,-49,-38,74,74,-41,-46,-40,74,]),'DIVIDE':([36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,60,61,62,79,83,84,86,88,89,90,91,92,95,97,98,101,102,103,104,105,106,107,108,114,118,119,123,126,127,132,136,140,141,145,147,148,151,152,154,155,],[-64,75,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-65,-66,-67,-68,75,75,75,75,-53,-61,75,-63,75,75,-43,75,75,75,-56,-57,75,75,75,-29,-48,75,-42,75,75,75,75,-39,-47,-49,-38,75,75,-41,-46,-40,75,]),'LT':([36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,60,61,62,79,83,84,86,88,89,90,91,92,95,97,98,101,102,103,104,105,106,107,108,114,118,119,123,126,127,132,136,140,141,145,147,148,151,152,154,155,],[-64,76,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-65,-66,-67,-68,76,76,76,76,-53,-61,76,-63,76,76,-43,76,-54,-55,-56,-57,None,None,None,-29,-48,76,-42,76,76,76,76,-39,-47,-49,-38,76,76,-41,-46,-40,76,]),'LE':([36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,60,61,62,79,83,84,86,88,89,90,91,92,95,97,98,101,102,103,104,105,106,107,108,114,118,119,123,126,127,132,136,140,141,145,147,148,151,152,154,155,],[-64,77,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-65,-66,-67,-68,77,77,77,77,-53,-61,77,-63,77,77,-43,77,-54,-55,-56,-57,None,None,None,-29,-48,77,-42,77,77,77,77,-39,-47,-49,-38,77,77,-41,-46,-40,77,]),'EQUALS':([36,37,38,39,40,41,42,43,44,45,46,47,48,49,59,60,61,62,79,83,84,86,88,89,90,91,92,95,97,98,101,102,103,104,105,106,107,108,114,118,119,123,126,127,132,136,140,141,145,147,148,151,152,154,155,],[-64,78,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-65,-66,-67,-68,78,78,78,78,-53,-61,78,-63,78,78,-43,78,-54,-55,-56,-57,None,None,None,-29,-48,78,-42,78,78,78,78,-39,-47,-49,-38,78,78,-41,-46,-40,78,]),'THEN':([36,38,39,40,41,42,43,44,45,46,47,48,49,59,60,61,62,83,88,89,90,91,95,97,101,102,103,104,105,106,107,108,114,119,123,136,140,141,145,151,152,154,],[-64,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-65,-66,-67,-68,112,-53,-61,-62,-63,-32,-43,-54,-55,-56,-57,-58,-59,-60,-29,-48,-42,-33,-39,-47,-49,-38,-41,-46,-40,]),'LOOP':([36,38,39,40,41,42,43,44,45,46,47,48,49,59,60,61,62,84,88,89,90,91,95,97,101,102,103,104,105,106,107,108,114,119,123,136,140,141,145,151,152,154,],[-64,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-65,-66,-67,-68,113,-53,-61,-62,-63,-32,-43,-54,-55,-56,-57,-58,-59,-60,-29,-48,-42,-33,-39,-47,-49,-38,-41,-46,-40,]),'OF':([36,38,39,40,41,42,43,44,45,46,47,48,49,59,60,61,62,88,89,90,91,92,95,97,101,102,103,104,105,106,107,108,114,119,123,136,140,141,145,151,152,154,],[-64,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-65,-66,-67,-68,-53,-61,-62,-63,116,-32,-43,-54,-55,-56,-57,-58,-59,-60,-29,-48,-42,-33,-39,-47,-49,-38,-41,-46,-40,]),'ELSE':([36,38,39,40,41,42,43,44,45,46,47,48,49,59,60,61,62,88,89,90,91,95,97,101,102,103,104,105,106,107,108,114,119,123,126,136,140,141,145,151,152,154,],[-64,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-65,-66,-67,-68,-53,-61,-62,-63,-32,-43,-54,-55,-56,-57,-58,-59,-60,-29,-48,-42,-33,139,-39,-47,-49,-38,-41,-46,-40,]),'POOL':([36,38,39,40,41,42,43,44,45,46,47,48,49,59,60,61,62,88,89,90,91,95,97,101,102,103,104,105,106,107,108,114,119,123,127,136,140,141,145,151,152,154,],[-64,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-65,-66,-67,-68,-53,-61,-62,-63,-32,-43,-54,-55,-56,-57,-58,-59,-60,-29,-48,-42,-33,140,-39,-47,-49,-38,-41,-46,-40,]),'IN':([36,38,39,40,41,42,43,44,45,46,47,48,49,59,60,61,62,80,81,88,89,90,91,95,97,101,102,103,104,105,106,107,108,114,119,123,124,125,136,140,141,145,147,151,152,154,],[-64,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-65,-66,-67,-68,109,-37,-53,-61,-62,-63,-32,-43,-54,-55,-56,-57,-58,-59,-60,-29,-48,-42,-33,-36,-34,-39,-47,-49,-38,-35,-41,-46,-40,]),'FI':([36,38,39,40,41,42,43,44,45,46,47,48,49,59,60,61,62,88,89,90,91,95,97,101,102,103,104,105,106,107,108,114,119,123,136,140,141,145,148,151,152,154,],[-64,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-65,-66,-67,-68,-53,-61,-62,-63,-32,-43,-54,-55,-56,-57,-58,-59,-60,-29,-48,-42,-33,-39,-47,-49,-38,152,-41,-46,-40,]),'ESAC':([129,130,142,156,],[141,-52,-51,-50,]),'RARROW':([149,],[153,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class_list':([0,6,],[2,8,]),'class':([0,6,],[3,3,]),'empty':([0,6,9,18,21,54,115,],[4,4,14,14,14,87,87,]),'feature_list':([9,18,21,],[12,22,29,]),'feature':([9,18,21,],[13,13,13,]),'formal_list':([20,34,],[25,67,]),'formal':([20,34,],[27,27,]),'expression':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[37,79,83,84,86,89,90,91,92,95,98,101,102,103,104,105,106,107,118,123,126,127,86,132,98,98,147,148,98,155,]),'expr_assign':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'expr_let':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'expr_dispatch':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'expr_loop':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'expr_block':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'expr_newtype':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'expr_mathcondition':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'expr_ID':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'expr_int':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'expr_string':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'expr_bool':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'expr_case':([30,50,52,53,54,56,57,58,63,68,69,72,73,74,75,76,77,78,94,109,112,113,115,117,120,121,138,139,146,153,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'binding_list':([51,110,],[80,124,]),'binding':([51,110,],[81,81,]),'expression_list':([54,115,],[85,128,]),'args_list':([69,120,121,146,],[96,134,135,150,]),'element_list':([116,130,],[129,142,]),'expr_case_element':([116,130,],[130,130,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_list','program',1,'p_program','parser.py',31),
  ('class -> CLASS TYPE LBRACE RBRACE','class',4,'p_class','parser.py',36),
  ('class -> CLASS TYPE INHERITS TYPE LBRACE RBRACE','class',6,'p_class','parser.py',37),
  ('class -> CLASS TYPE INHERITS TYPE LBRACE feature_list RBRACE','class',7,'p_class','parser.py',38),
  ('class -> CLASS TYPE LBRACE feature_list RBRACE','class',5,'p_class','parser.py',39),
  ('class_list -> class SEMI class_list','class_list',3,'p_class_list','parser.py',60),
  ('class_list -> empty','class_list',1,'p_class_list','parser.py',61),
  ('feature -> IDENTIFIER COLON TYPE','feature',3,'p_feature','parser.py',72),
  ('feature -> IDENTIFIER COLON TYPE LARROW expression','feature',5,'p_feature','parser.py',73),
  ('feature -> IDENTIFIER LPAREN formal_list RPAREN COLON TYPE LBRACE expression RBRACE','feature',9,'p_feature','parser.py',74),
  ('feature -> IDENTIFIER LPAREN RPAREN COLON TYPE LBRACE expression RBRACE','feature',8,'p_feature','parser.py',75),
  ('feature_list -> feature SEMI feature_list','feature_list',3,'p_feature_list','parser.py',105),
  ('feature_list -> empty','feature_list',1,'p_feature_list','parser.py',106),
  ('formal -> IDENTIFIER COLON TYPE','formal',3,'p_formal','parser.py',117),
  ('formal_list -> formal COMMA formal_list','formal_list',3,'p_formal_list','parser.py',124),
  ('formal_list -> formal','formal_list',1,'p_formal_list','parser.py',125),
  ('expression -> expr_assign','expression',1,'p_expression','parser.py',136),
  ('expression -> expr_let','expression',1,'p_expression','parser.py',137),
  ('expression -> expr_dispatch','expression',1,'p_expression','parser.py',138),
  ('expression -> expr_loop','expression',1,'p_expression','parser.py',139),
  ('expression -> expr_block','expression',1,'p_expression','parser.py',140),
  ('expression -> expr_newtype','expression',1,'p_expression','parser.py',141),
  ('expression -> expr_mathcondition','expression',1,'p_expression','parser.py',142),
  ('expression -> expr_ID','expression',1,'p_expression','parser.py',143),
  ('expression -> expr_int','expression',1,'p_expression','parser.py',144),
  ('expression -> expr_string','expression',1,'p_expression','parser.py',145),
  ('expression -> expr_bool','expression',1,'p_expression','parser.py',146),
  ('expression -> expr_case','expression',1,'p_expression','parser.py',147),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','parser.py',148),
  ('expression_list -> expression SEMI expression_list','expression_list',3,'p_expression_list','parser.py',159),
  ('expression_list -> empty','expression_list',1,'p_expression_list','parser.py',160),
  ('expr_assign -> IDENTIFIER LARROW expression','expr_assign',3,'p_expr_assign','parser.py',171),
  ('expr_let -> LET binding_list IN expression','expr_let',4,'p_expr_let','parser.py',179),
  ('binding -> IDENTIFIER COLON TYPE','binding',3,'p_binding','parser.py',187),
  ('binding -> IDENTIFIER COLON TYPE LARROW expression','binding',5,'p_binding','parser.py',188),
  ('binding_list -> binding COMMA binding_list','binding_list',3,'p_binding_list','parser.py',205),
  ('binding_list -> binding','binding_list',1,'p_binding_list','parser.py',206),
  ('expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN','expr_dispatch',6,'p_expr_dispatch','parser.py',216),
  ('expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN','expr_dispatch',5,'p_expr_dispatch','parser.py',217),
  ('expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN','expr_dispatch',8,'p_expr_dispatch','parser.py',218),
  ('expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN','expr_dispatch',7,'p_expr_dispatch','parser.py',219),
  ('expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN','expr_dispatch',4,'p_expr_dispatch','parser.py',220),
  ('expr_dispatch -> IDENTIFIER LPAREN RPAREN','expr_dispatch',3,'p_expr_dispatch','parser.py',221),
  ('args_list -> expression COMMA args_list','args_list',3,'p_args_list','parser.py',273),
  ('args_list -> expression','args_list',1,'p_args_list','parser.py',274),
  ('expr_loop -> IF expression THEN expression ELSE expression FI','expr_loop',7,'p_expr_loop','parser.py',284),
  ('expr_loop -> WHILE expression LOOP expression POOL','expr_loop',5,'p_expr_loop','parser.py',285),
  ('expr_block -> LBRACE expression_list RBRACE','expr_block',3,'p_expr_block','parser.py',303),
  ('expr_case -> CASE expression OF element_list ESAC','expr_case',5,'p_expr_case','parser.py',310),
  ('expr_case_element -> IDENTIFIER COLON TYPE RARROW expression SEMI','expr_case_element',6,'p_expr_case_element','parser.py',318),
  ('element_list -> expr_case_element element_list','element_list',2,'p_element_list','parser.py',327),
  ('element_list -> expr_case_element','element_list',1,'p_element_list','parser.py',328),
  ('expr_newtype -> NEW TYPE','expr_newtype',2,'p_expr_newtype','parser.py',339),
  ('expr_mathcondition -> expression PLUS expression','expr_mathcondition',3,'p_expr_mathcondition','parser.py',346),
  ('expr_mathcondition -> expression MINUS expression','expr_mathcondition',3,'p_expr_mathcondition','parser.py',347),
  ('expr_mathcondition -> expression TIMES expression','expr_mathcondition',3,'p_expr_mathcondition','parser.py',348),
  ('expr_mathcondition -> expression DIVIDE expression','expr_mathcondition',3,'p_expr_mathcondition','parser.py',349),
  ('expr_mathcondition -> expression LT expression','expr_mathcondition',3,'p_expr_mathcondition','parser.py',350),
  ('expr_mathcondition -> expression LE expression','expr_mathcondition',3,'p_expr_mathcondition','parser.py',351),
  ('expr_mathcondition -> expression EQUALS expression','expr_mathcondition',3,'p_expr_mathcondition','parser.py',352),
  ('expr_mathcondition -> TILDE expression','expr_mathcondition',2,'p_expr_mathcondition','parser.py',353),
  ('expr_mathcondition -> NOT expression','expr_mathcondition',2,'p_expr_mathcondition','parser.py',354),
  ('expr_mathcondition -> ISVOID expression','expr_mathcondition',2,'p_expr_mathcondition','parser.py',355),
  ('expr_ID -> IDENTIFIER','expr_ID',1,'p_expr_ID','parser.py',395),
  ('expr_int -> INTEGER','expr_int',1,'p_expr_int','parser.py',402),
  ('expr_string -> STRING','expr_string',1,'p_expr_string','parser.py',409),
  ('expr_bool -> TRUE','expr_bool',1,'p_expr_bool','parser.py',416),
  ('expr_bool -> FALSE','expr_bool',1,'p_expr_bool','parser.py',417),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',429),
]
