Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> class_list
Rule 2     class -> CLASS TYPE LBRACE RBRACE
Rule 3     class -> CLASS TYPE INHERITS TYPE LBRACE RBRACE
Rule 4     class -> CLASS TYPE INHERITS TYPE LBRACE feature_list RBRACE
Rule 5     class -> CLASS TYPE LBRACE feature_list RBRACE
Rule 6     class_list -> class SEMI class_list
Rule 7     class_list -> empty
Rule 8     feature -> IDENTIFIER COLON TYPE
Rule 9     feature -> IDENTIFIER COLON TYPE LARROW expression
Rule 10    feature -> IDENTIFIER LPAREN formal_list RPAREN COLON TYPE LBRACE expression RBRACE
Rule 11    feature -> IDENTIFIER LPAREN RPAREN COLON TYPE LBRACE expression RBRACE
Rule 12    feature_list -> feature SEMI feature_list
Rule 13    feature_list -> empty
Rule 14    formal -> IDENTIFIER COLON TYPE
Rule 15    formal_list -> formal COMMA formal_list
Rule 16    formal_list -> formal
Rule 17    expression -> expr_assign
Rule 18    expression -> expr_let
Rule 19    expression -> expr_dispatch
Rule 20    expression -> expr_loop
Rule 21    expression -> expr_block
Rule 22    expression -> expr_newtype
Rule 23    expression -> expr_mathcondition
Rule 24    expression -> expr_ID
Rule 25    expression -> expr_int
Rule 26    expression -> expr_string
Rule 27    expression -> expr_bool
Rule 28    expression -> expr_case
Rule 29    expression -> LPAREN expression RPAREN
Rule 30    expression_list -> expression SEMI expression_list
Rule 31    expression_list -> empty
Rule 32    expr_assign -> IDENTIFIER LARROW expression
Rule 33    expr_let -> LET binding_list IN expression
Rule 34    binding -> IDENTIFIER COLON TYPE
Rule 35    binding -> IDENTIFIER COLON TYPE LARROW expression
Rule 36    binding_list -> binding COMMA binding_list
Rule 37    binding_list -> binding
Rule 38    expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN
Rule 39    expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN
Rule 40    expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
Rule 41    expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
Rule 42    expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN
Rule 43    expr_dispatch -> IDENTIFIER LPAREN RPAREN
Rule 44    args_list -> expression COMMA args_list
Rule 45    args_list -> expression
Rule 46    expr_loop -> IF expression THEN expression ELSE expression FI
Rule 47    expr_loop -> WHILE expression LOOP expression POOL
Rule 48    expr_block -> LBRACE expression_list RBRACE
Rule 49    expr_case -> CASE expression OF element_list ESAC
Rule 50    expr_case_element -> IDENTIFIER COLON TYPE RARROW expression SEMI
Rule 51    element_list -> expr_case_element element_list
Rule 52    element_list -> expr_case_element
Rule 53    expr_newtype -> NEW TYPE
Rule 54    expr_mathcondition -> expression PLUS expression
Rule 55    expr_mathcondition -> expression MINUS expression
Rule 56    expr_mathcondition -> expression TIMES expression
Rule 57    expr_mathcondition -> expression DIVIDE expression
Rule 58    expr_mathcondition -> expression LT expression
Rule 59    expr_mathcondition -> expression LE expression
Rule 60    expr_mathcondition -> expression EQUALS expression
Rule 61    expr_mathcondition -> TILDE expression
Rule 62    expr_mathcondition -> NOT expression
Rule 63    expr_mathcondition -> ISVOID expression
Rule 64    expr_ID -> IDENTIFIER
Rule 65    expr_int -> INTEGER
Rule 66    expr_string -> STRING
Rule 67    expr_bool -> TRUE
Rule 68    expr_bool -> FALSE
Rule 69    empty -> <empty>

Terminals, with rules where they appear

AT                   : 40 41
CASE                 : 49
CLASS                : 2 3 4 5
COLON                : 8 9 10 11 14 34 35 50
COMMA                : 15 36 44
DIVIDE               : 57
DOT                  : 38 39 40 41
ELSE                 : 46
EQUALS               : 60
ESAC                 : 49
FALSE                : 68
FI                   : 46
IDENTIFIER           : 8 9 10 11 14 32 34 35 38 39 40 41 42 43 50 64
IF                   : 46
IN                   : 33
INHERITS             : 3 4
INTEGER              : 65
ISVOID               : 63
LARROW               : 9 32 35
LBRACE               : 2 3 4 5 10 11 48
LE                   : 59
LET                  : 33
LOOP                 : 47
LPAREN               : 10 11 29 38 39 40 41 42 43
LT                   : 58
MINUS                : 55
NEW                  : 53
NOT                  : 62
OF                   : 49
PLUS                 : 54
POOL                 : 47
RARROW               : 50
RBRACE               : 2 3 4 5 10 11 48
RPAREN               : 10 11 29 38 39 40 41 42 43
SEMI                 : 6 12 30 50
STRING               : 66
THEN                 : 46
TILDE                : 61
TIMES                : 56
TRUE                 : 67
TYPE                 : 2 3 3 4 4 5 8 9 10 11 14 34 35 40 41 50 53
WHILE                : 47
error                : 

Nonterminals, with rules where they appear

args_list            : 38 40 42 44
binding              : 36 37
binding_list         : 33 36
class                : 6
class_list           : 1 6
element_list         : 49 51
empty                : 7 13 31
expr_ID              : 24
expr_assign          : 17
expr_block           : 21
expr_bool            : 27
expr_case            : 28
expr_case_element    : 51 52
expr_dispatch        : 19
expr_int             : 25
expr_let             : 18
expr_loop            : 20
expr_mathcondition   : 23
expr_newtype         : 22
expr_string          : 26
expression           : 9 10 11 29 30 32 33 35 38 39 40 41 44 45 46 46 46 47 47 49 50 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 62 63
expression_list      : 30 48
feature              : 12
feature_list         : 4 5 12
formal               : 15 16
formal_list          : 10 15
program              : 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . class_list
    (6) class_list -> . class SEMI class_list
    (7) class_list -> . empty
    (2) class -> . CLASS TYPE LBRACE RBRACE
    (3) class -> . CLASS TYPE INHERITS TYPE LBRACE RBRACE
    (4) class -> . CLASS TYPE INHERITS TYPE LBRACE feature_list RBRACE
    (5) class -> . CLASS TYPE LBRACE feature_list RBRACE
    (69) empty -> .

    CLASS           shift and go to state 5
    $end            reduce using rule 69 (empty -> .)

    program                        shift and go to state 1
    class_list                     shift and go to state 2
    class                          shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> class_list .

    $end            reduce using rule 1 (program -> class_list .)


state 3

    (6) class_list -> class . SEMI class_list

    SEMI            shift and go to state 6


state 4

    (7) class_list -> empty .

    $end            reduce using rule 7 (class_list -> empty .)


state 5

    (2) class -> CLASS . TYPE LBRACE RBRACE
    (3) class -> CLASS . TYPE INHERITS TYPE LBRACE RBRACE
    (4) class -> CLASS . TYPE INHERITS TYPE LBRACE feature_list RBRACE
    (5) class -> CLASS . TYPE LBRACE feature_list RBRACE

    TYPE            shift and go to state 7


state 6

    (6) class_list -> class SEMI . class_list
    (6) class_list -> . class SEMI class_list
    (7) class_list -> . empty
    (2) class -> . CLASS TYPE LBRACE RBRACE
    (3) class -> . CLASS TYPE INHERITS TYPE LBRACE RBRACE
    (4) class -> . CLASS TYPE INHERITS TYPE LBRACE feature_list RBRACE
    (5) class -> . CLASS TYPE LBRACE feature_list RBRACE
    (69) empty -> .

    CLASS           shift and go to state 5
    $end            reduce using rule 69 (empty -> .)

    class                          shift and go to state 3
    class_list                     shift and go to state 8
    empty                          shift and go to state 4

state 7

    (2) class -> CLASS TYPE . LBRACE RBRACE
    (3) class -> CLASS TYPE . INHERITS TYPE LBRACE RBRACE
    (4) class -> CLASS TYPE . INHERITS TYPE LBRACE feature_list RBRACE
    (5) class -> CLASS TYPE . LBRACE feature_list RBRACE

    LBRACE          shift and go to state 9
    INHERITS        shift and go to state 10


state 8

    (6) class_list -> class SEMI class_list .

    $end            reduce using rule 6 (class_list -> class SEMI class_list .)


state 9

    (2) class -> CLASS TYPE LBRACE . RBRACE
    (5) class -> CLASS TYPE LBRACE . feature_list RBRACE
    (12) feature_list -> . feature SEMI feature_list
    (13) feature_list -> . empty
    (8) feature -> . IDENTIFIER COLON TYPE
    (9) feature -> . IDENTIFIER COLON TYPE LARROW expression
    (10) feature -> . IDENTIFIER LPAREN formal_list RPAREN COLON TYPE LBRACE expression RBRACE
    (11) feature -> . IDENTIFIER LPAREN RPAREN COLON TYPE LBRACE expression RBRACE
    (69) empty -> .

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 11
    IDENTIFIER      shift and go to state 15

  ! RBRACE          [ reduce using rule 69 (empty -> .) ]

    feature_list                   shift and go to state 12
    feature                        shift and go to state 13
    empty                          shift and go to state 14

state 10

    (3) class -> CLASS TYPE INHERITS . TYPE LBRACE RBRACE
    (4) class -> CLASS TYPE INHERITS . TYPE LBRACE feature_list RBRACE

    TYPE            shift and go to state 16


state 11

    (2) class -> CLASS TYPE LBRACE RBRACE .

    SEMI            reduce using rule 2 (class -> CLASS TYPE LBRACE RBRACE .)


state 12

    (5) class -> CLASS TYPE LBRACE feature_list . RBRACE

    RBRACE          shift and go to state 17


state 13

    (12) feature_list -> feature . SEMI feature_list

    SEMI            shift and go to state 18


state 14

    (13) feature_list -> empty .

    RBRACE          reduce using rule 13 (feature_list -> empty .)


state 15

    (8) feature -> IDENTIFIER . COLON TYPE
    (9) feature -> IDENTIFIER . COLON TYPE LARROW expression
    (10) feature -> IDENTIFIER . LPAREN formal_list RPAREN COLON TYPE LBRACE expression RBRACE
    (11) feature -> IDENTIFIER . LPAREN RPAREN COLON TYPE LBRACE expression RBRACE

    COLON           shift and go to state 19
    LPAREN          shift and go to state 20


state 16

    (3) class -> CLASS TYPE INHERITS TYPE . LBRACE RBRACE
    (4) class -> CLASS TYPE INHERITS TYPE . LBRACE feature_list RBRACE

    LBRACE          shift and go to state 21


state 17

    (5) class -> CLASS TYPE LBRACE feature_list RBRACE .

    SEMI            reduce using rule 5 (class -> CLASS TYPE LBRACE feature_list RBRACE .)


state 18

    (12) feature_list -> feature SEMI . feature_list
    (12) feature_list -> . feature SEMI feature_list
    (13) feature_list -> . empty
    (8) feature -> . IDENTIFIER COLON TYPE
    (9) feature -> . IDENTIFIER COLON TYPE LARROW expression
    (10) feature -> . IDENTIFIER LPAREN formal_list RPAREN COLON TYPE LBRACE expression RBRACE
    (11) feature -> . IDENTIFIER LPAREN RPAREN COLON TYPE LBRACE expression RBRACE
    (69) empty -> .

    IDENTIFIER      shift and go to state 15
    RBRACE          reduce using rule 69 (empty -> .)

    feature                        shift and go to state 13
    feature_list                   shift and go to state 22
    empty                          shift and go to state 14

state 19

    (8) feature -> IDENTIFIER COLON . TYPE
    (9) feature -> IDENTIFIER COLON . TYPE LARROW expression

    TYPE            shift and go to state 23


state 20

    (10) feature -> IDENTIFIER LPAREN . formal_list RPAREN COLON TYPE LBRACE expression RBRACE
    (11) feature -> IDENTIFIER LPAREN . RPAREN COLON TYPE LBRACE expression RBRACE
    (15) formal_list -> . formal COMMA formal_list
    (16) formal_list -> . formal
    (14) formal -> . IDENTIFIER COLON TYPE

    RPAREN          shift and go to state 26
    IDENTIFIER      shift and go to state 24

    formal_list                    shift and go to state 25
    formal                         shift and go to state 27

state 21

    (3) class -> CLASS TYPE INHERITS TYPE LBRACE . RBRACE
    (4) class -> CLASS TYPE INHERITS TYPE LBRACE . feature_list RBRACE
    (12) feature_list -> . feature SEMI feature_list
    (13) feature_list -> . empty
    (8) feature -> . IDENTIFIER COLON TYPE
    (9) feature -> . IDENTIFIER COLON TYPE LARROW expression
    (10) feature -> . IDENTIFIER LPAREN formal_list RPAREN COLON TYPE LBRACE expression RBRACE
    (11) feature -> . IDENTIFIER LPAREN RPAREN COLON TYPE LBRACE expression RBRACE
    (69) empty -> .

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 28
    IDENTIFIER      shift and go to state 15

  ! RBRACE          [ reduce using rule 69 (empty -> .) ]

    feature_list                   shift and go to state 29
    feature                        shift and go to state 13
    empty                          shift and go to state 14

state 22

    (12) feature_list -> feature SEMI feature_list .

    RBRACE          reduce using rule 12 (feature_list -> feature SEMI feature_list .)


state 23

    (8) feature -> IDENTIFIER COLON TYPE .
    (9) feature -> IDENTIFIER COLON TYPE . LARROW expression

    SEMI            reduce using rule 8 (feature -> IDENTIFIER COLON TYPE .)
    LARROW          shift and go to state 30


state 24

    (14) formal -> IDENTIFIER . COLON TYPE

    COLON           shift and go to state 31


state 25

    (10) feature -> IDENTIFIER LPAREN formal_list . RPAREN COLON TYPE LBRACE expression RBRACE

    RPAREN          shift and go to state 32


state 26

    (11) feature -> IDENTIFIER LPAREN RPAREN . COLON TYPE LBRACE expression RBRACE

    COLON           shift and go to state 33


state 27

    (15) formal_list -> formal . COMMA formal_list
    (16) formal_list -> formal .

    COMMA           shift and go to state 34
    RPAREN          reduce using rule 16 (formal_list -> formal .)


state 28

    (3) class -> CLASS TYPE INHERITS TYPE LBRACE RBRACE .

    SEMI            reduce using rule 3 (class -> CLASS TYPE INHERITS TYPE LBRACE RBRACE .)


state 29

    (4) class -> CLASS TYPE INHERITS TYPE LBRACE feature_list . RBRACE

    RBRACE          shift and go to state 35


state 30

    (9) feature -> IDENTIFIER COLON TYPE LARROW . expression
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 37
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 31

    (14) formal -> IDENTIFIER COLON . TYPE

    TYPE            shift and go to state 64


state 32

    (10) feature -> IDENTIFIER LPAREN formal_list RPAREN . COLON TYPE LBRACE expression RBRACE

    COLON           shift and go to state 65


state 33

    (11) feature -> IDENTIFIER LPAREN RPAREN COLON . TYPE LBRACE expression RBRACE

    TYPE            shift and go to state 66


state 34

    (15) formal_list -> formal COMMA . formal_list
    (15) formal_list -> . formal COMMA formal_list
    (16) formal_list -> . formal
    (14) formal -> . IDENTIFIER COLON TYPE

    IDENTIFIER      shift and go to state 24

    formal                         shift and go to state 27
    formal_list                    shift and go to state 67

state 35

    (4) class -> CLASS TYPE INHERITS TYPE LBRACE feature_list RBRACE .

    SEMI            reduce using rule 4 (class -> CLASS TYPE INHERITS TYPE LBRACE feature_list RBRACE .)


state 36

    (32) expr_assign -> IDENTIFIER . LARROW expression
    (42) expr_dispatch -> IDENTIFIER . LPAREN args_list RPAREN
    (43) expr_dispatch -> IDENTIFIER . LPAREN RPAREN
    (64) expr_ID -> IDENTIFIER .

    LARROW          shift and go to state 68
    LPAREN          shift and go to state 69
    DOT             reduce using rule 64 (expr_ID -> IDENTIFIER .)
    AT              reduce using rule 64 (expr_ID -> IDENTIFIER .)
    PLUS            reduce using rule 64 (expr_ID -> IDENTIFIER .)
    MINUS           reduce using rule 64 (expr_ID -> IDENTIFIER .)
    TIMES           reduce using rule 64 (expr_ID -> IDENTIFIER .)
    DIVIDE          reduce using rule 64 (expr_ID -> IDENTIFIER .)
    LT              reduce using rule 64 (expr_ID -> IDENTIFIER .)
    LE              reduce using rule 64 (expr_ID -> IDENTIFIER .)
    EQUALS          reduce using rule 64 (expr_ID -> IDENTIFIER .)
    SEMI            reduce using rule 64 (expr_ID -> IDENTIFIER .)
    RPAREN          reduce using rule 64 (expr_ID -> IDENTIFIER .)
    THEN            reduce using rule 64 (expr_ID -> IDENTIFIER .)
    LOOP            reduce using rule 64 (expr_ID -> IDENTIFIER .)
    OF              reduce using rule 64 (expr_ID -> IDENTIFIER .)
    COMMA           reduce using rule 64 (expr_ID -> IDENTIFIER .)
    RBRACE          reduce using rule 64 (expr_ID -> IDENTIFIER .)
    ELSE            reduce using rule 64 (expr_ID -> IDENTIFIER .)
    POOL            reduce using rule 64 (expr_ID -> IDENTIFIER .)
    IN              reduce using rule 64 (expr_ID -> IDENTIFIER .)
    FI              reduce using rule 64 (expr_ID -> IDENTIFIER .)


state 37

    (9) feature -> IDENTIFIER COLON TYPE LARROW expression .
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    SEMI            reduce using rule 9 (feature -> IDENTIFIER COLON TYPE LARROW expression .)
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75
    LT              shift and go to state 76
    LE              shift and go to state 77
    EQUALS          shift and go to state 78


state 38

    (17) expression -> expr_assign .

    DOT             reduce using rule 17 (expression -> expr_assign .)
    AT              reduce using rule 17 (expression -> expr_assign .)
    PLUS            reduce using rule 17 (expression -> expr_assign .)
    MINUS           reduce using rule 17 (expression -> expr_assign .)
    TIMES           reduce using rule 17 (expression -> expr_assign .)
    DIVIDE          reduce using rule 17 (expression -> expr_assign .)
    LT              reduce using rule 17 (expression -> expr_assign .)
    LE              reduce using rule 17 (expression -> expr_assign .)
    EQUALS          reduce using rule 17 (expression -> expr_assign .)
    SEMI            reduce using rule 17 (expression -> expr_assign .)
    RPAREN          reduce using rule 17 (expression -> expr_assign .)
    THEN            reduce using rule 17 (expression -> expr_assign .)
    LOOP            reduce using rule 17 (expression -> expr_assign .)
    OF              reduce using rule 17 (expression -> expr_assign .)
    COMMA           reduce using rule 17 (expression -> expr_assign .)
    RBRACE          reduce using rule 17 (expression -> expr_assign .)
    ELSE            reduce using rule 17 (expression -> expr_assign .)
    POOL            reduce using rule 17 (expression -> expr_assign .)
    IN              reduce using rule 17 (expression -> expr_assign .)
    FI              reduce using rule 17 (expression -> expr_assign .)


state 39

    (18) expression -> expr_let .

    DOT             reduce using rule 18 (expression -> expr_let .)
    AT              reduce using rule 18 (expression -> expr_let .)
    PLUS            reduce using rule 18 (expression -> expr_let .)
    MINUS           reduce using rule 18 (expression -> expr_let .)
    TIMES           reduce using rule 18 (expression -> expr_let .)
    DIVIDE          reduce using rule 18 (expression -> expr_let .)
    LT              reduce using rule 18 (expression -> expr_let .)
    LE              reduce using rule 18 (expression -> expr_let .)
    EQUALS          reduce using rule 18 (expression -> expr_let .)
    SEMI            reduce using rule 18 (expression -> expr_let .)
    RPAREN          reduce using rule 18 (expression -> expr_let .)
    THEN            reduce using rule 18 (expression -> expr_let .)
    LOOP            reduce using rule 18 (expression -> expr_let .)
    OF              reduce using rule 18 (expression -> expr_let .)
    COMMA           reduce using rule 18 (expression -> expr_let .)
    RBRACE          reduce using rule 18 (expression -> expr_let .)
    ELSE            reduce using rule 18 (expression -> expr_let .)
    POOL            reduce using rule 18 (expression -> expr_let .)
    IN              reduce using rule 18 (expression -> expr_let .)
    FI              reduce using rule 18 (expression -> expr_let .)


state 40

    (19) expression -> expr_dispatch .

    DOT             reduce using rule 19 (expression -> expr_dispatch .)
    AT              reduce using rule 19 (expression -> expr_dispatch .)
    PLUS            reduce using rule 19 (expression -> expr_dispatch .)
    MINUS           reduce using rule 19 (expression -> expr_dispatch .)
    TIMES           reduce using rule 19 (expression -> expr_dispatch .)
    DIVIDE          reduce using rule 19 (expression -> expr_dispatch .)
    LT              reduce using rule 19 (expression -> expr_dispatch .)
    LE              reduce using rule 19 (expression -> expr_dispatch .)
    EQUALS          reduce using rule 19 (expression -> expr_dispatch .)
    SEMI            reduce using rule 19 (expression -> expr_dispatch .)
    RPAREN          reduce using rule 19 (expression -> expr_dispatch .)
    THEN            reduce using rule 19 (expression -> expr_dispatch .)
    LOOP            reduce using rule 19 (expression -> expr_dispatch .)
    OF              reduce using rule 19 (expression -> expr_dispatch .)
    COMMA           reduce using rule 19 (expression -> expr_dispatch .)
    RBRACE          reduce using rule 19 (expression -> expr_dispatch .)
    ELSE            reduce using rule 19 (expression -> expr_dispatch .)
    POOL            reduce using rule 19 (expression -> expr_dispatch .)
    IN              reduce using rule 19 (expression -> expr_dispatch .)
    FI              reduce using rule 19 (expression -> expr_dispatch .)


state 41

    (20) expression -> expr_loop .

    DOT             reduce using rule 20 (expression -> expr_loop .)
    AT              reduce using rule 20 (expression -> expr_loop .)
    PLUS            reduce using rule 20 (expression -> expr_loop .)
    MINUS           reduce using rule 20 (expression -> expr_loop .)
    TIMES           reduce using rule 20 (expression -> expr_loop .)
    DIVIDE          reduce using rule 20 (expression -> expr_loop .)
    LT              reduce using rule 20 (expression -> expr_loop .)
    LE              reduce using rule 20 (expression -> expr_loop .)
    EQUALS          reduce using rule 20 (expression -> expr_loop .)
    SEMI            reduce using rule 20 (expression -> expr_loop .)
    RPAREN          reduce using rule 20 (expression -> expr_loop .)
    THEN            reduce using rule 20 (expression -> expr_loop .)
    LOOP            reduce using rule 20 (expression -> expr_loop .)
    OF              reduce using rule 20 (expression -> expr_loop .)
    COMMA           reduce using rule 20 (expression -> expr_loop .)
    RBRACE          reduce using rule 20 (expression -> expr_loop .)
    ELSE            reduce using rule 20 (expression -> expr_loop .)
    POOL            reduce using rule 20 (expression -> expr_loop .)
    IN              reduce using rule 20 (expression -> expr_loop .)
    FI              reduce using rule 20 (expression -> expr_loop .)


state 42

    (21) expression -> expr_block .

    DOT             reduce using rule 21 (expression -> expr_block .)
    AT              reduce using rule 21 (expression -> expr_block .)
    PLUS            reduce using rule 21 (expression -> expr_block .)
    MINUS           reduce using rule 21 (expression -> expr_block .)
    TIMES           reduce using rule 21 (expression -> expr_block .)
    DIVIDE          reduce using rule 21 (expression -> expr_block .)
    LT              reduce using rule 21 (expression -> expr_block .)
    LE              reduce using rule 21 (expression -> expr_block .)
    EQUALS          reduce using rule 21 (expression -> expr_block .)
    SEMI            reduce using rule 21 (expression -> expr_block .)
    RPAREN          reduce using rule 21 (expression -> expr_block .)
    THEN            reduce using rule 21 (expression -> expr_block .)
    LOOP            reduce using rule 21 (expression -> expr_block .)
    OF              reduce using rule 21 (expression -> expr_block .)
    COMMA           reduce using rule 21 (expression -> expr_block .)
    RBRACE          reduce using rule 21 (expression -> expr_block .)
    ELSE            reduce using rule 21 (expression -> expr_block .)
    POOL            reduce using rule 21 (expression -> expr_block .)
    IN              reduce using rule 21 (expression -> expr_block .)
    FI              reduce using rule 21 (expression -> expr_block .)


state 43

    (22) expression -> expr_newtype .

    DOT             reduce using rule 22 (expression -> expr_newtype .)
    AT              reduce using rule 22 (expression -> expr_newtype .)
    PLUS            reduce using rule 22 (expression -> expr_newtype .)
    MINUS           reduce using rule 22 (expression -> expr_newtype .)
    TIMES           reduce using rule 22 (expression -> expr_newtype .)
    DIVIDE          reduce using rule 22 (expression -> expr_newtype .)
    LT              reduce using rule 22 (expression -> expr_newtype .)
    LE              reduce using rule 22 (expression -> expr_newtype .)
    EQUALS          reduce using rule 22 (expression -> expr_newtype .)
    SEMI            reduce using rule 22 (expression -> expr_newtype .)
    RPAREN          reduce using rule 22 (expression -> expr_newtype .)
    THEN            reduce using rule 22 (expression -> expr_newtype .)
    LOOP            reduce using rule 22 (expression -> expr_newtype .)
    OF              reduce using rule 22 (expression -> expr_newtype .)
    COMMA           reduce using rule 22 (expression -> expr_newtype .)
    RBRACE          reduce using rule 22 (expression -> expr_newtype .)
    ELSE            reduce using rule 22 (expression -> expr_newtype .)
    POOL            reduce using rule 22 (expression -> expr_newtype .)
    IN              reduce using rule 22 (expression -> expr_newtype .)
    FI              reduce using rule 22 (expression -> expr_newtype .)


state 44

    (23) expression -> expr_mathcondition .

    DOT             reduce using rule 23 (expression -> expr_mathcondition .)
    AT              reduce using rule 23 (expression -> expr_mathcondition .)
    PLUS            reduce using rule 23 (expression -> expr_mathcondition .)
    MINUS           reduce using rule 23 (expression -> expr_mathcondition .)
    TIMES           reduce using rule 23 (expression -> expr_mathcondition .)
    DIVIDE          reduce using rule 23 (expression -> expr_mathcondition .)
    LT              reduce using rule 23 (expression -> expr_mathcondition .)
    LE              reduce using rule 23 (expression -> expr_mathcondition .)
    EQUALS          reduce using rule 23 (expression -> expr_mathcondition .)
    SEMI            reduce using rule 23 (expression -> expr_mathcondition .)
    RPAREN          reduce using rule 23 (expression -> expr_mathcondition .)
    THEN            reduce using rule 23 (expression -> expr_mathcondition .)
    LOOP            reduce using rule 23 (expression -> expr_mathcondition .)
    OF              reduce using rule 23 (expression -> expr_mathcondition .)
    COMMA           reduce using rule 23 (expression -> expr_mathcondition .)
    RBRACE          reduce using rule 23 (expression -> expr_mathcondition .)
    ELSE            reduce using rule 23 (expression -> expr_mathcondition .)
    POOL            reduce using rule 23 (expression -> expr_mathcondition .)
    IN              reduce using rule 23 (expression -> expr_mathcondition .)
    FI              reduce using rule 23 (expression -> expr_mathcondition .)


state 45

    (24) expression -> expr_ID .

    DOT             reduce using rule 24 (expression -> expr_ID .)
    AT              reduce using rule 24 (expression -> expr_ID .)
    PLUS            reduce using rule 24 (expression -> expr_ID .)
    MINUS           reduce using rule 24 (expression -> expr_ID .)
    TIMES           reduce using rule 24 (expression -> expr_ID .)
    DIVIDE          reduce using rule 24 (expression -> expr_ID .)
    LT              reduce using rule 24 (expression -> expr_ID .)
    LE              reduce using rule 24 (expression -> expr_ID .)
    EQUALS          reduce using rule 24 (expression -> expr_ID .)
    SEMI            reduce using rule 24 (expression -> expr_ID .)
    RPAREN          reduce using rule 24 (expression -> expr_ID .)
    THEN            reduce using rule 24 (expression -> expr_ID .)
    LOOP            reduce using rule 24 (expression -> expr_ID .)
    OF              reduce using rule 24 (expression -> expr_ID .)
    COMMA           reduce using rule 24 (expression -> expr_ID .)
    RBRACE          reduce using rule 24 (expression -> expr_ID .)
    ELSE            reduce using rule 24 (expression -> expr_ID .)
    POOL            reduce using rule 24 (expression -> expr_ID .)
    IN              reduce using rule 24 (expression -> expr_ID .)
    FI              reduce using rule 24 (expression -> expr_ID .)


state 46

    (25) expression -> expr_int .

    DOT             reduce using rule 25 (expression -> expr_int .)
    AT              reduce using rule 25 (expression -> expr_int .)
    PLUS            reduce using rule 25 (expression -> expr_int .)
    MINUS           reduce using rule 25 (expression -> expr_int .)
    TIMES           reduce using rule 25 (expression -> expr_int .)
    DIVIDE          reduce using rule 25 (expression -> expr_int .)
    LT              reduce using rule 25 (expression -> expr_int .)
    LE              reduce using rule 25 (expression -> expr_int .)
    EQUALS          reduce using rule 25 (expression -> expr_int .)
    SEMI            reduce using rule 25 (expression -> expr_int .)
    RPAREN          reduce using rule 25 (expression -> expr_int .)
    THEN            reduce using rule 25 (expression -> expr_int .)
    LOOP            reduce using rule 25 (expression -> expr_int .)
    OF              reduce using rule 25 (expression -> expr_int .)
    COMMA           reduce using rule 25 (expression -> expr_int .)
    RBRACE          reduce using rule 25 (expression -> expr_int .)
    ELSE            reduce using rule 25 (expression -> expr_int .)
    POOL            reduce using rule 25 (expression -> expr_int .)
    IN              reduce using rule 25 (expression -> expr_int .)
    FI              reduce using rule 25 (expression -> expr_int .)


state 47

    (26) expression -> expr_string .

    DOT             reduce using rule 26 (expression -> expr_string .)
    AT              reduce using rule 26 (expression -> expr_string .)
    PLUS            reduce using rule 26 (expression -> expr_string .)
    MINUS           reduce using rule 26 (expression -> expr_string .)
    TIMES           reduce using rule 26 (expression -> expr_string .)
    DIVIDE          reduce using rule 26 (expression -> expr_string .)
    LT              reduce using rule 26 (expression -> expr_string .)
    LE              reduce using rule 26 (expression -> expr_string .)
    EQUALS          reduce using rule 26 (expression -> expr_string .)
    SEMI            reduce using rule 26 (expression -> expr_string .)
    RPAREN          reduce using rule 26 (expression -> expr_string .)
    THEN            reduce using rule 26 (expression -> expr_string .)
    LOOP            reduce using rule 26 (expression -> expr_string .)
    OF              reduce using rule 26 (expression -> expr_string .)
    COMMA           reduce using rule 26 (expression -> expr_string .)
    RBRACE          reduce using rule 26 (expression -> expr_string .)
    ELSE            reduce using rule 26 (expression -> expr_string .)
    POOL            reduce using rule 26 (expression -> expr_string .)
    IN              reduce using rule 26 (expression -> expr_string .)
    FI              reduce using rule 26 (expression -> expr_string .)


state 48

    (27) expression -> expr_bool .

    DOT             reduce using rule 27 (expression -> expr_bool .)
    AT              reduce using rule 27 (expression -> expr_bool .)
    PLUS            reduce using rule 27 (expression -> expr_bool .)
    MINUS           reduce using rule 27 (expression -> expr_bool .)
    TIMES           reduce using rule 27 (expression -> expr_bool .)
    DIVIDE          reduce using rule 27 (expression -> expr_bool .)
    LT              reduce using rule 27 (expression -> expr_bool .)
    LE              reduce using rule 27 (expression -> expr_bool .)
    EQUALS          reduce using rule 27 (expression -> expr_bool .)
    SEMI            reduce using rule 27 (expression -> expr_bool .)
    RPAREN          reduce using rule 27 (expression -> expr_bool .)
    THEN            reduce using rule 27 (expression -> expr_bool .)
    LOOP            reduce using rule 27 (expression -> expr_bool .)
    OF              reduce using rule 27 (expression -> expr_bool .)
    COMMA           reduce using rule 27 (expression -> expr_bool .)
    RBRACE          reduce using rule 27 (expression -> expr_bool .)
    ELSE            reduce using rule 27 (expression -> expr_bool .)
    POOL            reduce using rule 27 (expression -> expr_bool .)
    IN              reduce using rule 27 (expression -> expr_bool .)
    FI              reduce using rule 27 (expression -> expr_bool .)


state 49

    (28) expression -> expr_case .

    DOT             reduce using rule 28 (expression -> expr_case .)
    AT              reduce using rule 28 (expression -> expr_case .)
    PLUS            reduce using rule 28 (expression -> expr_case .)
    MINUS           reduce using rule 28 (expression -> expr_case .)
    TIMES           reduce using rule 28 (expression -> expr_case .)
    DIVIDE          reduce using rule 28 (expression -> expr_case .)
    LT              reduce using rule 28 (expression -> expr_case .)
    LE              reduce using rule 28 (expression -> expr_case .)
    EQUALS          reduce using rule 28 (expression -> expr_case .)
    SEMI            reduce using rule 28 (expression -> expr_case .)
    RPAREN          reduce using rule 28 (expression -> expr_case .)
    THEN            reduce using rule 28 (expression -> expr_case .)
    LOOP            reduce using rule 28 (expression -> expr_case .)
    OF              reduce using rule 28 (expression -> expr_case .)
    COMMA           reduce using rule 28 (expression -> expr_case .)
    RBRACE          reduce using rule 28 (expression -> expr_case .)
    ELSE            reduce using rule 28 (expression -> expr_case .)
    POOL            reduce using rule 28 (expression -> expr_case .)
    IN              reduce using rule 28 (expression -> expr_case .)
    FI              reduce using rule 28 (expression -> expr_case .)


state 50

    (29) expression -> LPAREN . expression RPAREN
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 79
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 51

    (33) expr_let -> LET . binding_list IN expression
    (36) binding_list -> . binding COMMA binding_list
    (37) binding_list -> . binding
    (34) binding -> . IDENTIFIER COLON TYPE
    (35) binding -> . IDENTIFIER COLON TYPE LARROW expression

    IDENTIFIER      shift and go to state 82

    binding_list                   shift and go to state 80
    binding                        shift and go to state 81

state 52

    (46) expr_loop -> IF . expression THEN expression ELSE expression FI
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 83
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 53

    (47) expr_loop -> WHILE . expression LOOP expression POOL
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 84
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 54

    (48) expr_block -> LBRACE . expression_list RBRACE
    (30) expression_list -> . expression SEMI expression_list
    (31) expression_list -> . empty
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (69) empty -> .
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    RBRACE          reduce using rule 69 (empty -> .)
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression_list                shift and go to state 85
    expression                     shift and go to state 86
    empty                          shift and go to state 87
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 55

    (53) expr_newtype -> NEW . TYPE

    TYPE            shift and go to state 88


state 56

    (61) expr_mathcondition -> TILDE . expression
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 89
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 57

    (62) expr_mathcondition -> NOT . expression
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 90
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 58

    (63) expr_mathcondition -> ISVOID . expression
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 91
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 59

    (65) expr_int -> INTEGER .

    DOT             reduce using rule 65 (expr_int -> INTEGER .)
    AT              reduce using rule 65 (expr_int -> INTEGER .)
    PLUS            reduce using rule 65 (expr_int -> INTEGER .)
    MINUS           reduce using rule 65 (expr_int -> INTEGER .)
    TIMES           reduce using rule 65 (expr_int -> INTEGER .)
    DIVIDE          reduce using rule 65 (expr_int -> INTEGER .)
    LT              reduce using rule 65 (expr_int -> INTEGER .)
    LE              reduce using rule 65 (expr_int -> INTEGER .)
    EQUALS          reduce using rule 65 (expr_int -> INTEGER .)
    SEMI            reduce using rule 65 (expr_int -> INTEGER .)
    RPAREN          reduce using rule 65 (expr_int -> INTEGER .)
    THEN            reduce using rule 65 (expr_int -> INTEGER .)
    LOOP            reduce using rule 65 (expr_int -> INTEGER .)
    OF              reduce using rule 65 (expr_int -> INTEGER .)
    COMMA           reduce using rule 65 (expr_int -> INTEGER .)
    RBRACE          reduce using rule 65 (expr_int -> INTEGER .)
    ELSE            reduce using rule 65 (expr_int -> INTEGER .)
    POOL            reduce using rule 65 (expr_int -> INTEGER .)
    IN              reduce using rule 65 (expr_int -> INTEGER .)
    FI              reduce using rule 65 (expr_int -> INTEGER .)


state 60

    (66) expr_string -> STRING .

    DOT             reduce using rule 66 (expr_string -> STRING .)
    AT              reduce using rule 66 (expr_string -> STRING .)
    PLUS            reduce using rule 66 (expr_string -> STRING .)
    MINUS           reduce using rule 66 (expr_string -> STRING .)
    TIMES           reduce using rule 66 (expr_string -> STRING .)
    DIVIDE          reduce using rule 66 (expr_string -> STRING .)
    LT              reduce using rule 66 (expr_string -> STRING .)
    LE              reduce using rule 66 (expr_string -> STRING .)
    EQUALS          reduce using rule 66 (expr_string -> STRING .)
    SEMI            reduce using rule 66 (expr_string -> STRING .)
    RPAREN          reduce using rule 66 (expr_string -> STRING .)
    THEN            reduce using rule 66 (expr_string -> STRING .)
    LOOP            reduce using rule 66 (expr_string -> STRING .)
    OF              reduce using rule 66 (expr_string -> STRING .)
    COMMA           reduce using rule 66 (expr_string -> STRING .)
    RBRACE          reduce using rule 66 (expr_string -> STRING .)
    ELSE            reduce using rule 66 (expr_string -> STRING .)
    POOL            reduce using rule 66 (expr_string -> STRING .)
    IN              reduce using rule 66 (expr_string -> STRING .)
    FI              reduce using rule 66 (expr_string -> STRING .)


state 61

    (67) expr_bool -> TRUE .

    DOT             reduce using rule 67 (expr_bool -> TRUE .)
    AT              reduce using rule 67 (expr_bool -> TRUE .)
    PLUS            reduce using rule 67 (expr_bool -> TRUE .)
    MINUS           reduce using rule 67 (expr_bool -> TRUE .)
    TIMES           reduce using rule 67 (expr_bool -> TRUE .)
    DIVIDE          reduce using rule 67 (expr_bool -> TRUE .)
    LT              reduce using rule 67 (expr_bool -> TRUE .)
    LE              reduce using rule 67 (expr_bool -> TRUE .)
    EQUALS          reduce using rule 67 (expr_bool -> TRUE .)
    SEMI            reduce using rule 67 (expr_bool -> TRUE .)
    RPAREN          reduce using rule 67 (expr_bool -> TRUE .)
    THEN            reduce using rule 67 (expr_bool -> TRUE .)
    LOOP            reduce using rule 67 (expr_bool -> TRUE .)
    OF              reduce using rule 67 (expr_bool -> TRUE .)
    COMMA           reduce using rule 67 (expr_bool -> TRUE .)
    RBRACE          reduce using rule 67 (expr_bool -> TRUE .)
    ELSE            reduce using rule 67 (expr_bool -> TRUE .)
    POOL            reduce using rule 67 (expr_bool -> TRUE .)
    IN              reduce using rule 67 (expr_bool -> TRUE .)
    FI              reduce using rule 67 (expr_bool -> TRUE .)


state 62

    (68) expr_bool -> FALSE .

    DOT             reduce using rule 68 (expr_bool -> FALSE .)
    AT              reduce using rule 68 (expr_bool -> FALSE .)
    PLUS            reduce using rule 68 (expr_bool -> FALSE .)
    MINUS           reduce using rule 68 (expr_bool -> FALSE .)
    TIMES           reduce using rule 68 (expr_bool -> FALSE .)
    DIVIDE          reduce using rule 68 (expr_bool -> FALSE .)
    LT              reduce using rule 68 (expr_bool -> FALSE .)
    LE              reduce using rule 68 (expr_bool -> FALSE .)
    EQUALS          reduce using rule 68 (expr_bool -> FALSE .)
    SEMI            reduce using rule 68 (expr_bool -> FALSE .)
    RPAREN          reduce using rule 68 (expr_bool -> FALSE .)
    THEN            reduce using rule 68 (expr_bool -> FALSE .)
    LOOP            reduce using rule 68 (expr_bool -> FALSE .)
    OF              reduce using rule 68 (expr_bool -> FALSE .)
    COMMA           reduce using rule 68 (expr_bool -> FALSE .)
    RBRACE          reduce using rule 68 (expr_bool -> FALSE .)
    ELSE            reduce using rule 68 (expr_bool -> FALSE .)
    POOL            reduce using rule 68 (expr_bool -> FALSE .)
    IN              reduce using rule 68 (expr_bool -> FALSE .)
    FI              reduce using rule 68 (expr_bool -> FALSE .)


state 63

    (49) expr_case -> CASE . expression OF element_list ESAC
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 92
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 64

    (14) formal -> IDENTIFIER COLON TYPE .

    COMMA           reduce using rule 14 (formal -> IDENTIFIER COLON TYPE .)
    RPAREN          reduce using rule 14 (formal -> IDENTIFIER COLON TYPE .)


state 65

    (10) feature -> IDENTIFIER LPAREN formal_list RPAREN COLON . TYPE LBRACE expression RBRACE

    TYPE            shift and go to state 93


state 66

    (11) feature -> IDENTIFIER LPAREN RPAREN COLON TYPE . LBRACE expression RBRACE

    LBRACE          shift and go to state 94


state 67

    (15) formal_list -> formal COMMA formal_list .

    RPAREN          reduce using rule 15 (formal_list -> formal COMMA formal_list .)


state 68

    (32) expr_assign -> IDENTIFIER LARROW . expression
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 95
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 69

    (42) expr_dispatch -> IDENTIFIER LPAREN . args_list RPAREN
    (43) expr_dispatch -> IDENTIFIER LPAREN . RPAREN
    (44) args_list -> . expression COMMA args_list
    (45) args_list -> . expression
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    RPAREN          shift and go to state 97
    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    args_list                      shift and go to state 96
    expression                     shift and go to state 98
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 70

    (38) expr_dispatch -> expression DOT . IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression DOT . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 99


state 71

    (40) expr_dispatch -> expression AT . TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression AT . TYPE DOT IDENTIFIER LPAREN RPAREN

    TYPE            shift and go to state 100


state 72

    (54) expr_mathcondition -> expression PLUS . expression
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 101
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 73

    (55) expr_mathcondition -> expression MINUS . expression
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 102
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 74

    (56) expr_mathcondition -> expression TIMES . expression
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 103
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 75

    (57) expr_mathcondition -> expression DIVIDE . expression
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 104
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 76

    (58) expr_mathcondition -> expression LT . expression
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 105
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 77

    (59) expr_mathcondition -> expression LE . expression
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 106
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 78

    (60) expr_mathcondition -> expression EQUALS . expression
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 107
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 79

    (29) expression -> LPAREN expression . RPAREN
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    RPAREN          shift and go to state 108
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75
    LT              shift and go to state 76
    LE              shift and go to state 77
    EQUALS          shift and go to state 78


state 80

    (33) expr_let -> LET binding_list . IN expression

    IN              shift and go to state 109


state 81

    (36) binding_list -> binding . COMMA binding_list
    (37) binding_list -> binding .

    COMMA           shift and go to state 110
    IN              reduce using rule 37 (binding_list -> binding .)


state 82

    (34) binding -> IDENTIFIER . COLON TYPE
    (35) binding -> IDENTIFIER . COLON TYPE LARROW expression

    COLON           shift and go to state 111


state 83

    (46) expr_loop -> IF expression . THEN expression ELSE expression FI
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    THEN            shift and go to state 112
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75
    LT              shift and go to state 76
    LE              shift and go to state 77
    EQUALS          shift and go to state 78


state 84

    (47) expr_loop -> WHILE expression . LOOP expression POOL
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    LOOP            shift and go to state 113
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75
    LT              shift and go to state 76
    LE              shift and go to state 77
    EQUALS          shift and go to state 78


state 85

    (48) expr_block -> LBRACE expression_list . RBRACE

    RBRACE          shift and go to state 114


state 86

    (30) expression_list -> expression . SEMI expression_list
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    SEMI            shift and go to state 115
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75
    LT              shift and go to state 76
    LE              shift and go to state 77
    EQUALS          shift and go to state 78


state 87

    (31) expression_list -> empty .

    RBRACE          reduce using rule 31 (expression_list -> empty .)


state 88

    (53) expr_newtype -> NEW TYPE .

    DOT             reduce using rule 53 (expr_newtype -> NEW TYPE .)
    AT              reduce using rule 53 (expr_newtype -> NEW TYPE .)
    PLUS            reduce using rule 53 (expr_newtype -> NEW TYPE .)
    MINUS           reduce using rule 53 (expr_newtype -> NEW TYPE .)
    TIMES           reduce using rule 53 (expr_newtype -> NEW TYPE .)
    DIVIDE          reduce using rule 53 (expr_newtype -> NEW TYPE .)
    LT              reduce using rule 53 (expr_newtype -> NEW TYPE .)
    LE              reduce using rule 53 (expr_newtype -> NEW TYPE .)
    EQUALS          reduce using rule 53 (expr_newtype -> NEW TYPE .)
    SEMI            reduce using rule 53 (expr_newtype -> NEW TYPE .)
    RPAREN          reduce using rule 53 (expr_newtype -> NEW TYPE .)
    THEN            reduce using rule 53 (expr_newtype -> NEW TYPE .)
    LOOP            reduce using rule 53 (expr_newtype -> NEW TYPE .)
    OF              reduce using rule 53 (expr_newtype -> NEW TYPE .)
    COMMA           reduce using rule 53 (expr_newtype -> NEW TYPE .)
    RBRACE          reduce using rule 53 (expr_newtype -> NEW TYPE .)
    ELSE            reduce using rule 53 (expr_newtype -> NEW TYPE .)
    POOL            reduce using rule 53 (expr_newtype -> NEW TYPE .)
    IN              reduce using rule 53 (expr_newtype -> NEW TYPE .)
    FI              reduce using rule 53 (expr_newtype -> NEW TYPE .)


state 89

    (61) expr_mathcondition -> TILDE expression .
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    PLUS            reduce using rule 61 (expr_mathcondition -> TILDE expression .)
    MINUS           reduce using rule 61 (expr_mathcondition -> TILDE expression .)
    TIMES           reduce using rule 61 (expr_mathcondition -> TILDE expression .)
    DIVIDE          reduce using rule 61 (expr_mathcondition -> TILDE expression .)
    LT              reduce using rule 61 (expr_mathcondition -> TILDE expression .)
    LE              reduce using rule 61 (expr_mathcondition -> TILDE expression .)
    EQUALS          reduce using rule 61 (expr_mathcondition -> TILDE expression .)
    SEMI            reduce using rule 61 (expr_mathcondition -> TILDE expression .)
    RPAREN          reduce using rule 61 (expr_mathcondition -> TILDE expression .)
    THEN            reduce using rule 61 (expr_mathcondition -> TILDE expression .)
    LOOP            reduce using rule 61 (expr_mathcondition -> TILDE expression .)
    OF              reduce using rule 61 (expr_mathcondition -> TILDE expression .)
    COMMA           reduce using rule 61 (expr_mathcondition -> TILDE expression .)
    RBRACE          reduce using rule 61 (expr_mathcondition -> TILDE expression .)
    ELSE            reduce using rule 61 (expr_mathcondition -> TILDE expression .)
    POOL            reduce using rule 61 (expr_mathcondition -> TILDE expression .)
    IN              reduce using rule 61 (expr_mathcondition -> TILDE expression .)
    FI              reduce using rule 61 (expr_mathcondition -> TILDE expression .)
    DOT             shift and go to state 70
    AT              shift and go to state 71

  ! DOT             [ reduce using rule 61 (expr_mathcondition -> TILDE expression .) ]
  ! AT              [ reduce using rule 61 (expr_mathcondition -> TILDE expression .) ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! TIMES           [ shift and go to state 74 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 77 ]
  ! EQUALS          [ shift and go to state 78 ]


state 90

    (62) expr_mathcondition -> NOT expression .
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    SEMI            reduce using rule 62 (expr_mathcondition -> NOT expression .)
    RPAREN          reduce using rule 62 (expr_mathcondition -> NOT expression .)
    THEN            reduce using rule 62 (expr_mathcondition -> NOT expression .)
    LOOP            reduce using rule 62 (expr_mathcondition -> NOT expression .)
    OF              reduce using rule 62 (expr_mathcondition -> NOT expression .)
    COMMA           reduce using rule 62 (expr_mathcondition -> NOT expression .)
    RBRACE          reduce using rule 62 (expr_mathcondition -> NOT expression .)
    ELSE            reduce using rule 62 (expr_mathcondition -> NOT expression .)
    POOL            reduce using rule 62 (expr_mathcondition -> NOT expression .)
    IN              reduce using rule 62 (expr_mathcondition -> NOT expression .)
    FI              reduce using rule 62 (expr_mathcondition -> NOT expression .)
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75
    LT              shift and go to state 76
    LE              shift and go to state 77
    EQUALS          shift and go to state 78

  ! DOT             [ reduce using rule 62 (expr_mathcondition -> NOT expression .) ]
  ! AT              [ reduce using rule 62 (expr_mathcondition -> NOT expression .) ]
  ! PLUS            [ reduce using rule 62 (expr_mathcondition -> NOT expression .) ]
  ! MINUS           [ reduce using rule 62 (expr_mathcondition -> NOT expression .) ]
  ! TIMES           [ reduce using rule 62 (expr_mathcondition -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 62 (expr_mathcondition -> NOT expression .) ]
  ! LT              [ reduce using rule 62 (expr_mathcondition -> NOT expression .) ]
  ! LE              [ reduce using rule 62 (expr_mathcondition -> NOT expression .) ]
  ! EQUALS          [ reduce using rule 62 (expr_mathcondition -> NOT expression .) ]


state 91

    (63) expr_mathcondition -> ISVOID expression .
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    PLUS            reduce using rule 63 (expr_mathcondition -> ISVOID expression .)
    MINUS           reduce using rule 63 (expr_mathcondition -> ISVOID expression .)
    TIMES           reduce using rule 63 (expr_mathcondition -> ISVOID expression .)
    DIVIDE          reduce using rule 63 (expr_mathcondition -> ISVOID expression .)
    LT              reduce using rule 63 (expr_mathcondition -> ISVOID expression .)
    LE              reduce using rule 63 (expr_mathcondition -> ISVOID expression .)
    EQUALS          reduce using rule 63 (expr_mathcondition -> ISVOID expression .)
    SEMI            reduce using rule 63 (expr_mathcondition -> ISVOID expression .)
    RPAREN          reduce using rule 63 (expr_mathcondition -> ISVOID expression .)
    THEN            reduce using rule 63 (expr_mathcondition -> ISVOID expression .)
    LOOP            reduce using rule 63 (expr_mathcondition -> ISVOID expression .)
    OF              reduce using rule 63 (expr_mathcondition -> ISVOID expression .)
    COMMA           reduce using rule 63 (expr_mathcondition -> ISVOID expression .)
    RBRACE          reduce using rule 63 (expr_mathcondition -> ISVOID expression .)
    ELSE            reduce using rule 63 (expr_mathcondition -> ISVOID expression .)
    POOL            reduce using rule 63 (expr_mathcondition -> ISVOID expression .)
    IN              reduce using rule 63 (expr_mathcondition -> ISVOID expression .)
    FI              reduce using rule 63 (expr_mathcondition -> ISVOID expression .)
    DOT             shift and go to state 70
    AT              shift and go to state 71

  ! DOT             [ reduce using rule 63 (expr_mathcondition -> ISVOID expression .) ]
  ! AT              [ reduce using rule 63 (expr_mathcondition -> ISVOID expression .) ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! TIMES           [ shift and go to state 74 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 77 ]
  ! EQUALS          [ shift and go to state 78 ]


state 92

    (49) expr_case -> CASE expression . OF element_list ESAC
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    OF              shift and go to state 116
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75
    LT              shift and go to state 76
    LE              shift and go to state 77
    EQUALS          shift and go to state 78


state 93

    (10) feature -> IDENTIFIER LPAREN formal_list RPAREN COLON TYPE . LBRACE expression RBRACE

    LBRACE          shift and go to state 117


state 94

    (11) feature -> IDENTIFIER LPAREN RPAREN COLON TYPE LBRACE . expression RBRACE
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 118
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 95

    (32) expr_assign -> IDENTIFIER LARROW expression .
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    SEMI            reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .)
    RPAREN          reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .)
    THEN            reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .)
    LOOP            reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .)
    OF              reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .)
    COMMA           reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .)
    RBRACE          reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .)
    ELSE            reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .)
    POOL            reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .)
    IN              reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .)
    FI              reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .)
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75
    LT              shift and go to state 76
    LE              shift and go to state 77
    EQUALS          shift and go to state 78

  ! DOT             [ reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .) ]
  ! AT              [ reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .) ]
  ! PLUS            [ reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .) ]
  ! MINUS           [ reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .) ]
  ! TIMES           [ reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .) ]
  ! DIVIDE          [ reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .) ]
  ! LT              [ reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .) ]
  ! LE              [ reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .) ]
  ! EQUALS          [ reduce using rule 32 (expr_assign -> IDENTIFIER LARROW expression .) ]


state 96

    (42) expr_dispatch -> IDENTIFIER LPAREN args_list . RPAREN

    RPAREN          shift and go to state 119


state 97

    (43) expr_dispatch -> IDENTIFIER LPAREN RPAREN .

    DOT             reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)
    AT              reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)
    PLUS            reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)
    MINUS           reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)
    TIMES           reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)
    DIVIDE          reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)
    LT              reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)
    LE              reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)
    EQUALS          reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)
    SEMI            reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)
    RPAREN          reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)
    THEN            reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)
    LOOP            reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)
    OF              reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)
    COMMA           reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)
    RBRACE          reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)
    ELSE            reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)
    POOL            reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)
    IN              reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)
    FI              reduce using rule 43 (expr_dispatch -> IDENTIFIER LPAREN RPAREN .)


state 98

    (44) args_list -> expression . COMMA args_list
    (45) args_list -> expression .
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    COMMA           shift and go to state 120
    RPAREN          reduce using rule 45 (args_list -> expression .)
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75
    LT              shift and go to state 76
    LE              shift and go to state 77
    EQUALS          shift and go to state 78


state 99

    (38) expr_dispatch -> expression DOT IDENTIFIER . LPAREN args_list RPAREN
    (39) expr_dispatch -> expression DOT IDENTIFIER . LPAREN RPAREN

    LPAREN          shift and go to state 121


state 100

    (40) expr_dispatch -> expression AT TYPE . DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression AT TYPE . DOT IDENTIFIER LPAREN RPAREN

    DOT             shift and go to state 122


state 101

    (54) expr_mathcondition -> expression PLUS expression .
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    PLUS            reduce using rule 54 (expr_mathcondition -> expression PLUS expression .)
    MINUS           reduce using rule 54 (expr_mathcondition -> expression PLUS expression .)
    LT              reduce using rule 54 (expr_mathcondition -> expression PLUS expression .)
    LE              reduce using rule 54 (expr_mathcondition -> expression PLUS expression .)
    EQUALS          reduce using rule 54 (expr_mathcondition -> expression PLUS expression .)
    SEMI            reduce using rule 54 (expr_mathcondition -> expression PLUS expression .)
    RPAREN          reduce using rule 54 (expr_mathcondition -> expression PLUS expression .)
    THEN            reduce using rule 54 (expr_mathcondition -> expression PLUS expression .)
    LOOP            reduce using rule 54 (expr_mathcondition -> expression PLUS expression .)
    OF              reduce using rule 54 (expr_mathcondition -> expression PLUS expression .)
    COMMA           reduce using rule 54 (expr_mathcondition -> expression PLUS expression .)
    RBRACE          reduce using rule 54 (expr_mathcondition -> expression PLUS expression .)
    ELSE            reduce using rule 54 (expr_mathcondition -> expression PLUS expression .)
    POOL            reduce using rule 54 (expr_mathcondition -> expression PLUS expression .)
    IN              reduce using rule 54 (expr_mathcondition -> expression PLUS expression .)
    FI              reduce using rule 54 (expr_mathcondition -> expression PLUS expression .)
    DOT             shift and go to state 70
    AT              shift and go to state 71
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75

  ! DOT             [ reduce using rule 54 (expr_mathcondition -> expression PLUS expression .) ]
  ! AT              [ reduce using rule 54 (expr_mathcondition -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 54 (expr_mathcondition -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 54 (expr_mathcondition -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 77 ]
  ! EQUALS          [ shift and go to state 78 ]


state 102

    (55) expr_mathcondition -> expression MINUS expression .
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    PLUS            reduce using rule 55 (expr_mathcondition -> expression MINUS expression .)
    MINUS           reduce using rule 55 (expr_mathcondition -> expression MINUS expression .)
    LT              reduce using rule 55 (expr_mathcondition -> expression MINUS expression .)
    LE              reduce using rule 55 (expr_mathcondition -> expression MINUS expression .)
    EQUALS          reduce using rule 55 (expr_mathcondition -> expression MINUS expression .)
    SEMI            reduce using rule 55 (expr_mathcondition -> expression MINUS expression .)
    RPAREN          reduce using rule 55 (expr_mathcondition -> expression MINUS expression .)
    THEN            reduce using rule 55 (expr_mathcondition -> expression MINUS expression .)
    LOOP            reduce using rule 55 (expr_mathcondition -> expression MINUS expression .)
    OF              reduce using rule 55 (expr_mathcondition -> expression MINUS expression .)
    COMMA           reduce using rule 55 (expr_mathcondition -> expression MINUS expression .)
    RBRACE          reduce using rule 55 (expr_mathcondition -> expression MINUS expression .)
    ELSE            reduce using rule 55 (expr_mathcondition -> expression MINUS expression .)
    POOL            reduce using rule 55 (expr_mathcondition -> expression MINUS expression .)
    IN              reduce using rule 55 (expr_mathcondition -> expression MINUS expression .)
    FI              reduce using rule 55 (expr_mathcondition -> expression MINUS expression .)
    DOT             shift and go to state 70
    AT              shift and go to state 71
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75

  ! DOT             [ reduce using rule 55 (expr_mathcondition -> expression MINUS expression .) ]
  ! AT              [ reduce using rule 55 (expr_mathcondition -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 55 (expr_mathcondition -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expr_mathcondition -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 77 ]
  ! EQUALS          [ shift and go to state 78 ]


state 103

    (56) expr_mathcondition -> expression TIMES expression .
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    PLUS            reduce using rule 56 (expr_mathcondition -> expression TIMES expression .)
    MINUS           reduce using rule 56 (expr_mathcondition -> expression TIMES expression .)
    TIMES           reduce using rule 56 (expr_mathcondition -> expression TIMES expression .)
    DIVIDE          reduce using rule 56 (expr_mathcondition -> expression TIMES expression .)
    LT              reduce using rule 56 (expr_mathcondition -> expression TIMES expression .)
    LE              reduce using rule 56 (expr_mathcondition -> expression TIMES expression .)
    EQUALS          reduce using rule 56 (expr_mathcondition -> expression TIMES expression .)
    SEMI            reduce using rule 56 (expr_mathcondition -> expression TIMES expression .)
    RPAREN          reduce using rule 56 (expr_mathcondition -> expression TIMES expression .)
    THEN            reduce using rule 56 (expr_mathcondition -> expression TIMES expression .)
    LOOP            reduce using rule 56 (expr_mathcondition -> expression TIMES expression .)
    OF              reduce using rule 56 (expr_mathcondition -> expression TIMES expression .)
    COMMA           reduce using rule 56 (expr_mathcondition -> expression TIMES expression .)
    RBRACE          reduce using rule 56 (expr_mathcondition -> expression TIMES expression .)
    ELSE            reduce using rule 56 (expr_mathcondition -> expression TIMES expression .)
    POOL            reduce using rule 56 (expr_mathcondition -> expression TIMES expression .)
    IN              reduce using rule 56 (expr_mathcondition -> expression TIMES expression .)
    FI              reduce using rule 56 (expr_mathcondition -> expression TIMES expression .)
    DOT             shift and go to state 70
    AT              shift and go to state 71

  ! DOT             [ reduce using rule 56 (expr_mathcondition -> expression TIMES expression .) ]
  ! AT              [ reduce using rule 56 (expr_mathcondition -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! TIMES           [ shift and go to state 74 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 77 ]
  ! EQUALS          [ shift and go to state 78 ]


state 104

    (57) expr_mathcondition -> expression DIVIDE expression .
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    PLUS            reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .)
    MINUS           reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .)
    TIMES           reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .)
    LT              reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .)
    LE              reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .)
    EQUALS          reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .)
    SEMI            reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .)
    RPAREN          reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .)
    THEN            reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .)
    LOOP            reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .)
    OF              reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .)
    COMMA           reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .)
    RBRACE          reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .)
    ELSE            reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .)
    POOL            reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .)
    IN              reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .)
    FI              reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .)
    DOT             shift and go to state 70
    AT              shift and go to state 71

  ! DOT             [ reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .) ]
  ! AT              [ reduce using rule 57 (expr_mathcondition -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 72 ]
  ! MINUS           [ shift and go to state 73 ]
  ! TIMES           [ shift and go to state 74 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 77 ]
  ! EQUALS          [ shift and go to state 78 ]


state 105

    (58) expr_mathcondition -> expression LT expression .
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    LT              reduce using rule 58 (expr_mathcondition -> expression LT expression .)
    LE              reduce using rule 58 (expr_mathcondition -> expression LT expression .)
    EQUALS          reduce using rule 58 (expr_mathcondition -> expression LT expression .)
    SEMI            reduce using rule 58 (expr_mathcondition -> expression LT expression .)
    RPAREN          reduce using rule 58 (expr_mathcondition -> expression LT expression .)
    THEN            reduce using rule 58 (expr_mathcondition -> expression LT expression .)
    LOOP            reduce using rule 58 (expr_mathcondition -> expression LT expression .)
    OF              reduce using rule 58 (expr_mathcondition -> expression LT expression .)
    COMMA           reduce using rule 58 (expr_mathcondition -> expression LT expression .)
    RBRACE          reduce using rule 58 (expr_mathcondition -> expression LT expression .)
    ELSE            reduce using rule 58 (expr_mathcondition -> expression LT expression .)
    POOL            reduce using rule 58 (expr_mathcondition -> expression LT expression .)
    IN              reduce using rule 58 (expr_mathcondition -> expression LT expression .)
    FI              reduce using rule 58 (expr_mathcondition -> expression LT expression .)
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75

  ! DOT             [ reduce using rule 58 (expr_mathcondition -> expression LT expression .) ]
  ! AT              [ reduce using rule 58 (expr_mathcondition -> expression LT expression .) ]
  ! PLUS            [ reduce using rule 58 (expr_mathcondition -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 58 (expr_mathcondition -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 58 (expr_mathcondition -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 58 (expr_mathcondition -> expression LT expression .) ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 77 ]
  ! EQUALS          [ shift and go to state 78 ]


state 106

    (59) expr_mathcondition -> expression LE expression .
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    LT              reduce using rule 59 (expr_mathcondition -> expression LE expression .)
    LE              reduce using rule 59 (expr_mathcondition -> expression LE expression .)
    EQUALS          reduce using rule 59 (expr_mathcondition -> expression LE expression .)
    SEMI            reduce using rule 59 (expr_mathcondition -> expression LE expression .)
    RPAREN          reduce using rule 59 (expr_mathcondition -> expression LE expression .)
    THEN            reduce using rule 59 (expr_mathcondition -> expression LE expression .)
    LOOP            reduce using rule 59 (expr_mathcondition -> expression LE expression .)
    OF              reduce using rule 59 (expr_mathcondition -> expression LE expression .)
    COMMA           reduce using rule 59 (expr_mathcondition -> expression LE expression .)
    RBRACE          reduce using rule 59 (expr_mathcondition -> expression LE expression .)
    ELSE            reduce using rule 59 (expr_mathcondition -> expression LE expression .)
    POOL            reduce using rule 59 (expr_mathcondition -> expression LE expression .)
    IN              reduce using rule 59 (expr_mathcondition -> expression LE expression .)
    FI              reduce using rule 59 (expr_mathcondition -> expression LE expression .)
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75

  ! DOT             [ reduce using rule 59 (expr_mathcondition -> expression LE expression .) ]
  ! AT              [ reduce using rule 59 (expr_mathcondition -> expression LE expression .) ]
  ! PLUS            [ reduce using rule 59 (expr_mathcondition -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 59 (expr_mathcondition -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 59 (expr_mathcondition -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 59 (expr_mathcondition -> expression LE expression .) ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 77 ]
  ! EQUALS          [ shift and go to state 78 ]


state 107

    (60) expr_mathcondition -> expression EQUALS expression .
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    LT              reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .)
    LE              reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .)
    EQUALS          reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .)
    SEMI            reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .)
    RPAREN          reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .)
    THEN            reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .)
    LOOP            reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .)
    OF              reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .)
    COMMA           reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .)
    RBRACE          reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .)
    ELSE            reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .)
    POOL            reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .)
    IN              reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .)
    FI              reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .)
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75

  ! DOT             [ reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .) ]
  ! AT              [ reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .) ]
  ! PLUS            [ reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .) ]
  ! MINUS           [ reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .) ]
  ! TIMES           [ reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 60 (expr_mathcondition -> expression EQUALS expression .) ]
  ! LT              [ shift and go to state 76 ]
  ! LE              [ shift and go to state 77 ]
  ! EQUALS          [ shift and go to state 78 ]


state 108

    (29) expression -> LPAREN expression RPAREN .

    DOT             reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    AT              reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    LOOP            reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    OF              reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    POOL            reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 29 (expression -> LPAREN expression RPAREN .)
    FI              reduce using rule 29 (expression -> LPAREN expression RPAREN .)


state 109

    (33) expr_let -> LET binding_list IN . expression
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 123
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 110

    (36) binding_list -> binding COMMA . binding_list
    (36) binding_list -> . binding COMMA binding_list
    (37) binding_list -> . binding
    (34) binding -> . IDENTIFIER COLON TYPE
    (35) binding -> . IDENTIFIER COLON TYPE LARROW expression

    IDENTIFIER      shift and go to state 82

    binding                        shift and go to state 81
    binding_list                   shift and go to state 124

state 111

    (34) binding -> IDENTIFIER COLON . TYPE
    (35) binding -> IDENTIFIER COLON . TYPE LARROW expression

    TYPE            shift and go to state 125


state 112

    (46) expr_loop -> IF expression THEN . expression ELSE expression FI
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 126
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 113

    (47) expr_loop -> WHILE expression LOOP . expression POOL
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 127
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 114

    (48) expr_block -> LBRACE expression_list RBRACE .

    DOT             reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)
    AT              reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)
    PLUS            reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)
    MINUS           reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)
    TIMES           reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)
    DIVIDE          reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)
    LT              reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)
    LE              reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)
    EQUALS          reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)
    SEMI            reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)
    RPAREN          reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)
    THEN            reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)
    LOOP            reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)
    OF              reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)
    COMMA           reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)
    RBRACE          reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)
    ELSE            reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)
    POOL            reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)
    IN              reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)
    FI              reduce using rule 48 (expr_block -> LBRACE expression_list RBRACE .)


state 115

    (30) expression_list -> expression SEMI . expression_list
    (30) expression_list -> . expression SEMI expression_list
    (31) expression_list -> . empty
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (69) empty -> .
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    RBRACE          reduce using rule 69 (empty -> .)
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 86
    expression_list                shift and go to state 128
    empty                          shift and go to state 87
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 116

    (49) expr_case -> CASE expression OF . element_list ESAC
    (51) element_list -> . expr_case_element element_list
    (52) element_list -> . expr_case_element
    (50) expr_case_element -> . IDENTIFIER COLON TYPE RARROW expression SEMI

    IDENTIFIER      shift and go to state 131

    element_list                   shift and go to state 129
    expr_case_element              shift and go to state 130

state 117

    (10) feature -> IDENTIFIER LPAREN formal_list RPAREN COLON TYPE LBRACE . expression RBRACE
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 132
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 118

    (11) feature -> IDENTIFIER LPAREN RPAREN COLON TYPE LBRACE expression . RBRACE
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    RBRACE          shift and go to state 133
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75
    LT              shift and go to state 76
    LE              shift and go to state 77
    EQUALS          shift and go to state 78


state 119

    (42) expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .

    DOT             reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)
    AT              reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)
    PLUS            reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)
    MINUS           reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)
    TIMES           reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)
    DIVIDE          reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)
    LT              reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)
    LE              reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)
    EQUALS          reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)
    SEMI            reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)
    RPAREN          reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)
    THEN            reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)
    LOOP            reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)
    OF              reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)
    COMMA           reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)
    RBRACE          reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)
    ELSE            reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)
    POOL            reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)
    IN              reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)
    FI              reduce using rule 42 (expr_dispatch -> IDENTIFIER LPAREN args_list RPAREN .)


state 120

    (44) args_list -> expression COMMA . args_list
    (44) args_list -> . expression COMMA args_list
    (45) args_list -> . expression
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 98
    args_list                      shift and go to state 134
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 121

    (38) expr_dispatch -> expression DOT IDENTIFIER LPAREN . args_list RPAREN
    (39) expr_dispatch -> expression DOT IDENTIFIER LPAREN . RPAREN
    (44) args_list -> . expression COMMA args_list
    (45) args_list -> . expression
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    RPAREN          shift and go to state 136
    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 98
    args_list                      shift and go to state 135
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 122

    (40) expr_dispatch -> expression AT TYPE DOT . IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression AT TYPE DOT . IDENTIFIER LPAREN RPAREN

    IDENTIFIER      shift and go to state 137


state 123

    (33) expr_let -> LET binding_list IN expression .
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for AT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
    SEMI            reduce using rule 33 (expr_let -> LET binding_list IN expression .)
    RPAREN          reduce using rule 33 (expr_let -> LET binding_list IN expression .)
    THEN            reduce using rule 33 (expr_let -> LET binding_list IN expression .)
    LOOP            reduce using rule 33 (expr_let -> LET binding_list IN expression .)
    OF              reduce using rule 33 (expr_let -> LET binding_list IN expression .)
    COMMA           reduce using rule 33 (expr_let -> LET binding_list IN expression .)
    RBRACE          reduce using rule 33 (expr_let -> LET binding_list IN expression .)
    ELSE            reduce using rule 33 (expr_let -> LET binding_list IN expression .)
    POOL            reduce using rule 33 (expr_let -> LET binding_list IN expression .)
    IN              reduce using rule 33 (expr_let -> LET binding_list IN expression .)
    FI              reduce using rule 33 (expr_let -> LET binding_list IN expression .)
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75
    LT              shift and go to state 76
    LE              shift and go to state 77
    EQUALS          shift and go to state 78

  ! DOT             [ reduce using rule 33 (expr_let -> LET binding_list IN expression .) ]
  ! AT              [ reduce using rule 33 (expr_let -> LET binding_list IN expression .) ]
  ! PLUS            [ reduce using rule 33 (expr_let -> LET binding_list IN expression .) ]
  ! MINUS           [ reduce using rule 33 (expr_let -> LET binding_list IN expression .) ]
  ! TIMES           [ reduce using rule 33 (expr_let -> LET binding_list IN expression .) ]
  ! DIVIDE          [ reduce using rule 33 (expr_let -> LET binding_list IN expression .) ]
  ! LT              [ reduce using rule 33 (expr_let -> LET binding_list IN expression .) ]
  ! LE              [ reduce using rule 33 (expr_let -> LET binding_list IN expression .) ]
  ! EQUALS          [ reduce using rule 33 (expr_let -> LET binding_list IN expression .) ]


state 124

    (36) binding_list -> binding COMMA binding_list .

    IN              reduce using rule 36 (binding_list -> binding COMMA binding_list .)


state 125

    (34) binding -> IDENTIFIER COLON TYPE .
    (35) binding -> IDENTIFIER COLON TYPE . LARROW expression

    COMMA           reduce using rule 34 (binding -> IDENTIFIER COLON TYPE .)
    IN              reduce using rule 34 (binding -> IDENTIFIER COLON TYPE .)
    LARROW          shift and go to state 138


state 126

    (46) expr_loop -> IF expression THEN expression . ELSE expression FI
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    ELSE            shift and go to state 139
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75
    LT              shift and go to state 76
    LE              shift and go to state 77
    EQUALS          shift and go to state 78


state 127

    (47) expr_loop -> WHILE expression LOOP expression . POOL
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    POOL            shift and go to state 140
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75
    LT              shift and go to state 76
    LE              shift and go to state 77
    EQUALS          shift and go to state 78


state 128

    (30) expression_list -> expression SEMI expression_list .

    RBRACE          reduce using rule 30 (expression_list -> expression SEMI expression_list .)


state 129

    (49) expr_case -> CASE expression OF element_list . ESAC

    ESAC            shift and go to state 141


state 130

    (51) element_list -> expr_case_element . element_list
    (52) element_list -> expr_case_element .
    (51) element_list -> . expr_case_element element_list
    (52) element_list -> . expr_case_element
    (50) expr_case_element -> . IDENTIFIER COLON TYPE RARROW expression SEMI

    ESAC            reduce using rule 52 (element_list -> expr_case_element .)
    IDENTIFIER      shift and go to state 131

    expr_case_element              shift and go to state 130
    element_list                   shift and go to state 142

state 131

    (50) expr_case_element -> IDENTIFIER . COLON TYPE RARROW expression SEMI

    COLON           shift and go to state 143


state 132

    (10) feature -> IDENTIFIER LPAREN formal_list RPAREN COLON TYPE LBRACE expression . RBRACE
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    RBRACE          shift and go to state 144
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75
    LT              shift and go to state 76
    LE              shift and go to state 77
    EQUALS          shift and go to state 78


state 133

    (11) feature -> IDENTIFIER LPAREN RPAREN COLON TYPE LBRACE expression RBRACE .

    SEMI            reduce using rule 11 (feature -> IDENTIFIER LPAREN RPAREN COLON TYPE LBRACE expression RBRACE .)


state 134

    (44) args_list -> expression COMMA args_list .

    RPAREN          reduce using rule 44 (args_list -> expression COMMA args_list .)


state 135

    (38) expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list . RPAREN

    RPAREN          shift and go to state 145


state 136

    (39) expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .

    DOT             reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)
    AT              reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)
    PLUS            reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)
    MINUS           reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)
    TIMES           reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)
    DIVIDE          reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)
    LT              reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)
    LE              reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)
    EQUALS          reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)
    SEMI            reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)
    RPAREN          reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)
    THEN            reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)
    LOOP            reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)
    OF              reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)
    COMMA           reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)
    RBRACE          reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)
    ELSE            reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)
    POOL            reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)
    IN              reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)
    FI              reduce using rule 39 (expr_dispatch -> expression DOT IDENTIFIER LPAREN RPAREN .)


state 137

    (40) expr_dispatch -> expression AT TYPE DOT IDENTIFIER . LPAREN args_list RPAREN
    (41) expr_dispatch -> expression AT TYPE DOT IDENTIFIER . LPAREN RPAREN

    LPAREN          shift and go to state 146


state 138

    (35) binding -> IDENTIFIER COLON TYPE LARROW . expression
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 147
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 139

    (46) expr_loop -> IF expression THEN expression ELSE . expression FI
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 148
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 140

    (47) expr_loop -> WHILE expression LOOP expression POOL .

    DOT             reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)
    AT              reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)
    PLUS            reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)
    MINUS           reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)
    TIMES           reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)
    DIVIDE          reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)
    LT              reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)
    LE              reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)
    EQUALS          reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)
    SEMI            reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)
    RPAREN          reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)
    THEN            reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)
    LOOP            reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)
    OF              reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)
    COMMA           reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)
    RBRACE          reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)
    ELSE            reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)
    POOL            reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)
    IN              reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)
    FI              reduce using rule 47 (expr_loop -> WHILE expression LOOP expression POOL .)


state 141

    (49) expr_case -> CASE expression OF element_list ESAC .

    DOT             reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)
    AT              reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)
    PLUS            reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)
    MINUS           reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)
    TIMES           reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)
    DIVIDE          reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)
    LT              reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)
    LE              reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)
    EQUALS          reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)
    SEMI            reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)
    RPAREN          reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)
    THEN            reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)
    LOOP            reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)
    OF              reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)
    COMMA           reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)
    RBRACE          reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)
    ELSE            reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)
    POOL            reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)
    IN              reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)
    FI              reduce using rule 49 (expr_case -> CASE expression OF element_list ESAC .)


state 142

    (51) element_list -> expr_case_element element_list .

    ESAC            reduce using rule 51 (element_list -> expr_case_element element_list .)


state 143

    (50) expr_case_element -> IDENTIFIER COLON . TYPE RARROW expression SEMI

    TYPE            shift and go to state 149


state 144

    (10) feature -> IDENTIFIER LPAREN formal_list RPAREN COLON TYPE LBRACE expression RBRACE .

    SEMI            reduce using rule 10 (feature -> IDENTIFIER LPAREN formal_list RPAREN COLON TYPE LBRACE expression RBRACE .)


state 145

    (38) expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .

    DOT             reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)
    AT              reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)
    PLUS            reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)
    MINUS           reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)
    TIMES           reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)
    DIVIDE          reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)
    LT              reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)
    LE              reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)
    EQUALS          reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)
    SEMI            reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)
    RPAREN          reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)
    THEN            reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)
    LOOP            reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)
    OF              reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)
    COMMA           reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)
    RBRACE          reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)
    ELSE            reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)
    POOL            reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)
    IN              reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)
    FI              reduce using rule 38 (expr_dispatch -> expression DOT IDENTIFIER LPAREN args_list RPAREN .)


state 146

    (40) expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN . args_list RPAREN
    (41) expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN . RPAREN
    (44) args_list -> . expression COMMA args_list
    (45) args_list -> . expression
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    RPAREN          shift and go to state 151
    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 98
    args_list                      shift and go to state 150
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 147

    (35) binding -> IDENTIFIER COLON TYPE LARROW expression .
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    COMMA           reduce using rule 35 (binding -> IDENTIFIER COLON TYPE LARROW expression .)
    IN              reduce using rule 35 (binding -> IDENTIFIER COLON TYPE LARROW expression .)
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75
    LT              shift and go to state 76
    LE              shift and go to state 77
    EQUALS          shift and go to state 78


state 148

    (46) expr_loop -> IF expression THEN expression ELSE expression . FI
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    FI              shift and go to state 152
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75
    LT              shift and go to state 76
    LE              shift and go to state 77
    EQUALS          shift and go to state 78


state 149

    (50) expr_case_element -> IDENTIFIER COLON TYPE . RARROW expression SEMI

    RARROW          shift and go to state 153


state 150

    (40) expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list . RPAREN

    RPAREN          shift and go to state 154


state 151

    (41) expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .

    DOT             reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)
    AT              reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)
    PLUS            reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)
    MINUS           reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)
    TIMES           reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)
    DIVIDE          reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)
    LT              reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)
    LE              reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)
    EQUALS          reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)
    SEMI            reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)
    RPAREN          reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)
    THEN            reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)
    LOOP            reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)
    OF              reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)
    COMMA           reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)
    RBRACE          reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)
    ELSE            reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)
    POOL            reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)
    IN              reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)
    FI              reduce using rule 41 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN RPAREN .)


state 152

    (46) expr_loop -> IF expression THEN expression ELSE expression FI .

    DOT             reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)
    AT              reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)
    PLUS            reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)
    MINUS           reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)
    TIMES           reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)
    DIVIDE          reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)
    LT              reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)
    LE              reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)
    EQUALS          reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)
    SEMI            reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)
    RPAREN          reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)
    THEN            reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)
    LOOP            reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)
    OF              reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)
    COMMA           reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)
    RBRACE          reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)
    ELSE            reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)
    POOL            reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)
    IN              reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)
    FI              reduce using rule 46 (expr_loop -> IF expression THEN expression ELSE expression FI .)


state 153

    (50) expr_case_element -> IDENTIFIER COLON TYPE RARROW . expression SEMI
    (17) expression -> . expr_assign
    (18) expression -> . expr_let
    (19) expression -> . expr_dispatch
    (20) expression -> . expr_loop
    (21) expression -> . expr_block
    (22) expression -> . expr_newtype
    (23) expression -> . expr_mathcondition
    (24) expression -> . expr_ID
    (25) expression -> . expr_int
    (26) expression -> . expr_string
    (27) expression -> . expr_bool
    (28) expression -> . expr_case
    (29) expression -> . LPAREN expression RPAREN
    (32) expr_assign -> . IDENTIFIER LARROW expression
    (33) expr_let -> . LET binding_list IN expression
    (38) expr_dispatch -> . expression DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> . expression DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> . expression AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (42) expr_dispatch -> . IDENTIFIER LPAREN args_list RPAREN
    (43) expr_dispatch -> . IDENTIFIER LPAREN RPAREN
    (46) expr_loop -> . IF expression THEN expression ELSE expression FI
    (47) expr_loop -> . WHILE expression LOOP expression POOL
    (48) expr_block -> . LBRACE expression_list RBRACE
    (53) expr_newtype -> . NEW TYPE
    (54) expr_mathcondition -> . expression PLUS expression
    (55) expr_mathcondition -> . expression MINUS expression
    (56) expr_mathcondition -> . expression TIMES expression
    (57) expr_mathcondition -> . expression DIVIDE expression
    (58) expr_mathcondition -> . expression LT expression
    (59) expr_mathcondition -> . expression LE expression
    (60) expr_mathcondition -> . expression EQUALS expression
    (61) expr_mathcondition -> . TILDE expression
    (62) expr_mathcondition -> . NOT expression
    (63) expr_mathcondition -> . ISVOID expression
    (64) expr_ID -> . IDENTIFIER
    (65) expr_int -> . INTEGER
    (66) expr_string -> . STRING
    (67) expr_bool -> . TRUE
    (68) expr_bool -> . FALSE
    (49) expr_case -> . CASE expression OF element_list ESAC

    LPAREN          shift and go to state 50
    IDENTIFIER      shift and go to state 36
    LET             shift and go to state 51
    IF              shift and go to state 52
    WHILE           shift and go to state 53
    LBRACE          shift and go to state 54
    NEW             shift and go to state 55
    TILDE           shift and go to state 56
    NOT             shift and go to state 57
    ISVOID          shift and go to state 58
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    CASE            shift and go to state 63

    expression                     shift and go to state 155
    expr_assign                    shift and go to state 38
    expr_let                       shift and go to state 39
    expr_dispatch                  shift and go to state 40
    expr_loop                      shift and go to state 41
    expr_block                     shift and go to state 42
    expr_newtype                   shift and go to state 43
    expr_mathcondition             shift and go to state 44
    expr_ID                        shift and go to state 45
    expr_int                       shift and go to state 46
    expr_string                    shift and go to state 47
    expr_bool                      shift and go to state 48
    expr_case                      shift and go to state 49

state 154

    (40) expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .

    DOT             reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)
    AT              reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)
    PLUS            reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)
    MINUS           reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)
    TIMES           reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)
    DIVIDE          reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)
    LT              reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)
    LE              reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)
    EQUALS          reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)
    SEMI            reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)
    RPAREN          reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)
    THEN            reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)
    LOOP            reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)
    OF              reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)
    COMMA           reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)
    RBRACE          reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)
    ELSE            reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)
    POOL            reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)
    IN              reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)
    FI              reduce using rule 40 (expr_dispatch -> expression AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN .)


state 155

    (50) expr_case_element -> IDENTIFIER COLON TYPE RARROW expression . SEMI
    (38) expr_dispatch -> expression . DOT IDENTIFIER LPAREN args_list RPAREN
    (39) expr_dispatch -> expression . DOT IDENTIFIER LPAREN RPAREN
    (40) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN args_list RPAREN
    (41) expr_dispatch -> expression . AT TYPE DOT IDENTIFIER LPAREN RPAREN
    (54) expr_mathcondition -> expression . PLUS expression
    (55) expr_mathcondition -> expression . MINUS expression
    (56) expr_mathcondition -> expression . TIMES expression
    (57) expr_mathcondition -> expression . DIVIDE expression
    (58) expr_mathcondition -> expression . LT expression
    (59) expr_mathcondition -> expression . LE expression
    (60) expr_mathcondition -> expression . EQUALS expression

    SEMI            shift and go to state 156
    DOT             shift and go to state 70
    AT              shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73
    TIMES           shift and go to state 74
    DIVIDE          shift and go to state 75
    LT              shift and go to state 76
    LE              shift and go to state 77
    EQUALS          shift and go to state 78


state 156

    (50) expr_case_element -> IDENTIFIER COLON TYPE RARROW expression SEMI .

    IDENTIFIER      reduce using rule 50 (expr_case_element -> IDENTIFIER COLON TYPE RARROW expression SEMI .)
    ESAC            reduce using rule 50 (expr_case_element -> IDENTIFIER COLON TYPE RARROW expression SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RBRACE in state 9 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 21 resolved as shift
WARNING: shift/reduce conflict for DOT in state 123 resolved as shift
WARNING: shift/reduce conflict for AT in state 123 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 123 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 123 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 123 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 123 resolved as shift
WARNING: shift/reduce conflict for LT in state 123 resolved as shift
WARNING: shift/reduce conflict for LE in state 123 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 123 resolved as shift
